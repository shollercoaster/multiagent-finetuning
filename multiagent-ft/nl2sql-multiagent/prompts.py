import os, json
from string import Template
from typing import List

# Load your API key from environment
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# 1. Schema Agent prompt
def schema_agent_prompt(question: str, schema_list: str) -> str:
    return Template(
        """
You are a Schema Agent in an NL2SQL framework. Given a natural language question and table schemas (with columns, PKs, and FKs), identify the relevant tables and columns needed, including intermediate tables for joins.

Question: $question
Schemas:
$schema_list

Return a list of lines in the format:
Table: PK -> Col, FK, col1, col2, ...

List Foreign Key for tables only if it is relevant.
ONLY list relevant tables and columns in given format and no other extra characters.
"""
    ).substitute(question=question, schema_list=schema_list)

# 2. Subproblem Agent prompt
def subproblem_agent_prompt(question: str, schema_info: str) -> str:
    return Template(
        """
You are a Subproblem Agent. Your task is to decompose a natural language question into SQL subproblems.

You will be provided:
- A natural language question
- A textual schema summary that lists relevant tables and columns (generated by a Schema Agent)

Use this information to infer which SQL clauses are likely needed other than SELECT (e.g., WHERE, GROUP BY, ORDER BY, JOIN, HAVING, LIMIT, INTERSECT).

Output a JSON object containing a list of subproblems:
{
  "subproblems": [
    { "clause": "SELECT", "expression": "..." },
    { "clause": "JOIN", "expression": "..." },
    ...
  ]
}

Only output valid JSON — no markdown, no extra commentary.

Question:
$question

Schema:
$schema
"""
    ).substitute(question=question.strip(), schema=schema_info.strip())

def bird_subproblem_agent_prompt(question: str, schema_info: str, evidence:str) -> str:
    return Template(
        """
You are a Subproblem Agent. Your task is to decompose a natural language question into SQL subproblems.

You will be provided:
- A natural language question
- A textual schema summary that lists relevant tables and columns (generated by a Schema Agent)
- Evidence: helpful information about the domain, formulas, or data relevant to query generation

Use this information to infer which SQL clauses are likely needed other than SELECT (e.g., WHERE, GROUP BY, ORDER BY, JOIN, HAVING, LIMIT, INTE>
Output a JSON object containing a list of subproblems:
{
  "subproblems": [
    { "clause": "SELECT", "expression": "..." },
    { "clause": "WHERE", "expression": "..." },
    ...
  ]
}

Only output valid JSON — no markdown, no extra commentary.

Question:
$question

Schema:
$schema

Evidence:
$evidence
"""
    ).substitute(question=question.strip(), schema=schema_info.strip(), evidence=evidence.strip())

# 3. Query Plan Agent prompt
def query_plan_agent_prompt(question: str, schema_info: str, subproblem_json: str, critic_issues: list = None) -> str:
    base_prompt = Template(
        """
You are a Query Plan Agent. Using the question, schema info, and subproblems, generate a step-by-step SQL query plan.

Question: $question
Schema Info:
$schema_info
Subproblems:
$subproblem_json
$critic_feedback

Generate a concise step-by-step SQL plan that **fixes** all listed errors.

Return plan steps like:
1. FROM tableA
2. JOIN tableB ON tableA.colX = tableB.colY
3. JOIN tableC ON tableB.colZ = tableC.colW

Return only the plan (no SQL or extra text).
"""
    )
    if critic_issues:
        feedback = "\nPREVIOUS ERRORS TO AVOID:\n" # "\nIMPORTANT: Avoid the following errors detected in the earlier SQL attempt:\n"
        feedback += "\n".join([f"- {issue}" for issue in critic_issues])
    else:
        feedback = ""

    return base_prompt.substitute(question=question, schema_info=schema_info, subproblem_json=subproblem_json, critic_feedback=feedback)

def bird_query_plan_agent_prompt(question: str, schema_info: str, subproblem_json: str, evidence: str):
    return Template(
        """
You are a Query Plan Agent. Using the question, schema info, and subproblems, generate a step-by-step SQL query plan. Use the evidence to understand helpful domain information, or additional data needed to generate sql query.


Question: $question
Schema Info:
$schema_info
Subproblems:
$subproblem_json
Evidence:
$evidence

Provide a concise and to-the-point plan, each step describing how to build parts of the SQL.
"""
    ).substitute(question=question, schema_info=schema_info, subproblem_json=subproblem_json, evidence=evidence.strip())

# 4. SQL Generating Agent prompt
def bird_sql_agent_prompt(plan: str, evidence: str) -> str:
    return Template(
        """
You are an SQL Generating Agent. Given the plan, write ONLY the final SQL query with no extra text or formatting. Use the evidence to understand helpful domain information, or additional data needed to generate sql query.

Plan:
$plan
Evidence:
$evidence

Return exactly one valid SQL statement.
"""
    ).substitute(plan=plan, evidence=evidence)

# 4. SQL Generating Agent prompt
def sql_agent_prompt(plan: str, schema, critic_issues : list = None) -> str:
    base_prompt = Template(
        """
You are an SQL Generating Agent. Given the plan and table schema, write ONLY the final SQL query with no extra text or formatting.

Plan:
$plan
Schema:
$schema

Ensure your SQL:
- Includes all tables in the plan
- Uses the same join conditions and keys
- Does not reintroduce previous errors: $critic_feedback

Write ONLY the final valid SQL query. Do NOT include commentary.
"""
    )
    if critic_issues:
        # feedback = "\nIMPORTANT: Avoid the following errors found in the earlier SQL attempt:\n"
        feedback = "\nENSURE THAT YOU ADDRESS THESE ERRORS:\n" + "\n".join(f"- {e}" for e in critic_issues)
        # feedback += "\n".join([f"- {issue}" for issue in critic_issues])
    else:
        feedback = ""

    return base_prompt.substitute(plan=plan, critic_feedback=feedback, schema=schema)


# 5. Critic Agent prompt
def nl2sqlbugs_critic_agent_prompt(sql: str, bug_list: str) -> str:
    return Template(
        """
You are a Critic Agent. Validate the SQL query against known NL2SQL bug patterns.

Original SQL: $sql
Known bugs database: $bug_list

If you find errors, output JSON:{"error": "<description>"}
Otherwise output:{"valid": true}
"""
    ).substitute(sql=sql, bug_list=bug_list)

def critic_agent_prompt(question: str, sql: str) -> str:
    return Template(
    """
You are a Critic Agent. Your job is to inspect a SQL query and determine whether it is logically and structurally valid.

Check for:
- Logical fallacies (e.g. comparing two incompatible types)
- Incorrect/missing joins
- Missing clauses required to answer the question
- Aggregations used incorrectly
- Hardcoded values that should come from a column
- Unused subqueries or tables

Question:
{question}

SQL Query:
{sql}

Return **only** one of the following:

1. If the SQL is valid:

{
   "valid": true
}

2. If the SQL has issues:

{
  "valid": false,
  "error_types": [
    {"error_type": "explanation"},
    ...
  ]
}

DO NOT add any explanation, markdown, or text outside this JSON. Only valid JSON.
Only return errors if you find them. Don't complicate things.
"""
    ).substitute(question=question.strip(), sql=sql.strip())

def taxonomy_critic_agent_prompt(question: str, sql: str, taxonomy: dict) -> str:
    taxonomy_str = json.dumps(taxonomy, indent=2)
    return f"""
You are a Critic Agent. Given an NL question and generated SQL, identify structural or semantic errors based on the following taxonomy (9 categories, 31 subtypes):

{taxonomy_str}

Input:
Question: {question}
SQL: {sql}

Return **only** JSON following this schema:

If no errors:
{{
  "valid": true
}}

If there are errors:
{{
  "valid": false,
  "error_types": [ "category.subtype", ... ]
}}

Check also for, and mention the name of column or table that's missing or extra:
- join_missing_table
- join_wrong_column
- table_forbidden

Example: ["join.missing_table - (table_name)", "join.extra_col - (col_name)", "aggregation.agg_no_groupby"]

Return only JSON, no other commentary."""
