{
  "aggregates": {
    "exact_match": 0.02,
    "valid_sql": 0.19,
    "execution_match": 0.06
  },
  "examples": [
    {
      "question": "How many singers do we have?",
      "pred": "",
      "gold": "SELECT count(*) FROM singer",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the total number of singers?",
      "pred": "",
      "gold": "SELECT count(*) FROM singer",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "pred": "select name ,  country ,  age from singer order by age ASC",
      "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "pred": "select name ,  country ,  age from singer order by age DESC",
      "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "pred": "",
      "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "pred": "",
      "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the name and the release year of the song by the youngest singer.",
      "pred": "select T1.name ,  T1.song_release_year from singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id GROUP BY T1.name ,  T1.song_release_year ORDER BY T1.age ASC LIMIT 1",
      "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "pred": "select T1.name ,  T1.song_release_year from singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.age  =  (SELECT min(age) FROM singer)",
      "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are all distinct countries where singers above age 20 are from?",
      "pred": "",
      "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are  the different countries with singers above age 20?",
      "pred": "",
      "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show all countries and the number of singers in each country.",
      "pred": "",
      "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many singers are from each country?",
      "pred": "select country ,  count(*) from singer GROUP BY country ORDER BY count(*) DESC NULLS LAST",
      "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List all song names by singers above the average age.",
      "pred": "select song_name from singer where age  >  (select avg(age) from singer) order by song_name",
      "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are all the song names by singers who are older than average?",
      "pred": "select T1.song_name from singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.age  >  (SELECT avg(age) FROM singer) ORDER BY T1.song_name NULLS LAST",
      "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "pred": "",
      "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "pred": "",
      "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the maximum capacity and the average of all stadiums ?",
      "pred": "",
      "gold": "select max(capacity), average from stadium",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average and maximum capacities for all stadiums ?",
      "pred": "",
      "gold": "select avg(capacity) ,  max(capacity) from stadium",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "pred": "",
      "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "pred": "",
      "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many concerts are there in year 2014 or 2015?",
      "pred": "",
      "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many concerts occurred in 2014 or 2015?",
      "pred": "",
      "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "pred": "",
      "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "For each stadium, how many concerts play there?",
      "pred": "",
      "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "pred": "select T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014 OR T2.year  =  2015 GROUP BY T1.name ,  T1.capacity ORDER BY count",
      "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
      "pred": "select T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >  2013 ORDER BY T1.capacity DESC LIMIT 1",
      "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which year has most number of concerts?",
      "pred": "",
      "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the year that had the most concerts?",
      "pred": "",
      "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the stadium names without any concert.",
      "pred": "",
      "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the stadiums without any concerts?",
      "pred": "",
      "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "pred": "",
      "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "pred": "select name from stadium except stadium in concert where year  =  2014",
      "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "pred": "",
      "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "pred": "",
      "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names , themes , and number of singers for every concert ?",
      "pred": "",
      "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "List singer names and number of concerts for each singer.",
      "pred": "",
      "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the singers and number of concerts for each person?",
      "pred": "select singer_name ,  count(*) FROM singer_in_concert GROUP BY singer_id ORDER BY count(*) DESC",
      "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List all singer names in concerts in year 2014.",
      "pred": "",
      "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "pred": "",
      "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "pred": "",
      "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "pred": "",
      "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "pred": "",
      "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "pred": "",
      "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of concerts happened in the stadium with the highest capacity .",
      "pred": "",
      "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
      "pred": "select count(*) from stadium t1 JOIN concert t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.capacity  =  (SELECT max(capacity) FROM stadium)",
      "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the number of pets whose weight is heavier than 10.",
      "pred": "select count(*) from pets where weight  >  10",
      "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many pets have a greater weight than 10?",
      "pred": "",
      "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the weight of the youngest dog.",
      "pred": "",
      "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How much does the youngest dog weigh?",
      "pred": "",
      "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "pred": "",
      "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "List the maximum weight and type for each type of pet.",
      "pred": "",
      "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find number of pets owned by students who are older than 20.",
      "pred": "",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many pets are owned by students that have an age greater than 20?",
      "pred": "",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "pred": "",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many dog pets are raised by female students?",
      "pred": "",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of distinct type of pets.",
      "pred": "",
      "gold": "SELECT count(DISTINCT pettype) FROM pets",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many different types of pet are there?",
      "pred": "",
      "gold": "SELECT count(DISTINCT pettype) FROM pets",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name of students who have cat or dog pet.",
      "pred": "",
      "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "pred": "select first_name FROM student JOIN has_pet ON student_id  =  pet_id WHERE pet_type  =  \"cat\" OR pet_type  =  \"dog\" ORDER BY first_name NULLS LAST",
      "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name of students who have both cat and dog pets .",
      "pred": "",
      "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "pred": "",
      "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the major and age of students who do not have a cat pet.",
      "pred": "",
      "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "pred": "",
      "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the id of students who do not have a cat pet.",
      "pred": "",
      "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids of the students who do not own cats as pets?",
      "pred": "",
      "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "pred": "",
      "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "pred": "",
      "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the type and weight of the youngest pet.",
      "pred": "select pet_type ,  weight FROM pets ORDER BY age ASC LIMIT 1",
      "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "pred": "select pet_type ,  min(pet_age) ,  min(weight) FROM Pets GROUP BY pet_type ORDER BY min(pet_age) ASC LIMIT 1",
      "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "pred": "",
      "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the id and weight of every pet who is older than 1?",
      "pred": "",
      "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average and maximum age for each type of pet.",
      "pred": "",
      "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average and maximum age for each pet type?",
      "pred": "",
      "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average weight for each pet type.",
      "pred": "",
      "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average weight for each type of pet?",
      "pred": "",
      "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name and age of students who have a pet.",
      "pred": "",
      "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the different first names and ages of the students who do have pets?",
      "pred": "",
      "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "pred": "select T1.stu_id ,  T2.pet_id from student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stuid WHERE T1.last_name  =  'Smith'",
      "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "pred": "select T1.pet_id from student AS T1 JOIN has_pet AS T2 ON T1.pet_id  =  T2.pet_id WHERE T2.stu_id IN (SELECT stu_id FROM student WHERE last_name  =  'Smith')",
      "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the number of pets for each student who has any pet and student id.",
      "pred": "",
      "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
      "pred": "",
      "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name and gender of student who have more than one pet.",
      "pred": "",
      "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "pred": "",
      "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the last name of the student who has a cat that is age 3.",
      "pred": "",
      "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "pred": "",
      "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average age of students who do not have any pet .",
      "pred": "",
      "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average age for all students who do not own any pets ?",
      "pred": "",
      "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many continents are there?",
      "pred": "select count(*) from continents",
      "gold": "SELECT count(*) FROM CONTINENTS;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the number of continents?",
      "pred": "select count(*) from continents",
      "gold": "SELECT count(*) FROM CONTINENTS;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "pred": "",
      "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "For each continent, list its id, name, and how many countries it has?",
      "pred": "",
      "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many countries are listed?",
      "pred": "",
      "gold": "SELECT count(*) FROM COUNTRIES;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many countries exist?",
      "pred": "",
      "gold": "SELECT count(*) FROM COUNTRIES;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "pred": "",
      "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "pred": "",
      "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which model of the car has the minimum horsepower?",
      "pred": "",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "pred": "",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the model of the car whose weight is below the average weight.",
      "pred": "",
      "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the model for the car with a weight smaller than the average?",
      "pred": "",
      "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "pred": "",
      "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "exact": false,
      "valid": false,
      "exec_match": false
    }
  ]
}