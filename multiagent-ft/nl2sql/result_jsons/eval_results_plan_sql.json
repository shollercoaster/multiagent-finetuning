{
  "aggregates": {
    "exact_match": 0.23,
    "valid_sql": 1.0,
    "exec_match": 0.47
  },
  "examples": [
    {
      "question": "How many singers do we have?",
      "query_plan": "Count the number of rows in the singer table.",
      "pred": "SELECT count(*) FROM singer",
      "gold": "SELECT count(*) FROM singer",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the total number of singers?",
      "query_plan": "Count the number of rows in the singer table.",
      "pred": "SELECT count(*) FROM singer",
      "gold": "SELECT count(*) FROM singer",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "query_plan": "To solve this question, I would use a query plan that involves selecting the columns specified, and ordering the results by age in descending order.",
      "pred": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "query_plan": "To solve this question, I would use a query plan that involves retrieving data from the singer table. I would order the data in descending order of age.",
      "pred": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "query_plan": "To solve this question, I would use a query plan that involves retrieving the average, minimum, and maximum age from the singer table where the country is France.",
      "pred": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "query_plan": "To find the average, minimum, and maximum age for all French singers, we need to look at the singer table. We can use the AVG, MIN, and MAX functions to find these values.",
      "pred": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  \"France\"",
      "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the name and the release year of the song by the youngest singer.",
      "query_plan": "First, find the singer with the smallest age. Then, find the song that corresponds to this singer.",
      "pred": "SELECT T1.name ,  T1.song_release_year FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN song AS T3 ON T2.concert_id  =  T3.concert_id ORDER BY T1.age ASC LIMIT 1",
      "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "query_plan": "First, find the age of the youngest singer. Then, find the song name and release year for all songs that have this age.",
      "pred": "SELECT T1.name ,  T1.song_release_year FROM singer AS T1 JOIN song AS T2 ON T1.age  =  T2.age ORDER BY T1.age ASC LIMIT 1",
      "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are all distinct countries where singers above age 20 are from?",
      "query_plan": "To find all distinct countries where singers are from, we need to look at the country column in the singer table.",
      "pred": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are  the different countries with singers above age 20?",
      "query_plan": "To find the different countries with singers above age 20, we need to look at the singer table. We need to find the country of singers who are above age 20.",
      "pred": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show all countries and the number of singers in each country.",
      "query_plan": "To solve this question, I would use a group by statement to group the singers by country and count the number of singers in each country.",
      "pred": "SELECT country ,  COUNT(*) FROM singer GROUP BY country",
      "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many singers are from each country?",
      "query_plan": "Count the number of singers from each country.",
      "pred": "SELECT country ,  COUNT(*) FROM singer GROUP BY country",
      "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List all song names by singers above the average age.",
      "query_plan": "First, find the average age of singers. Then, find all singers whose age is above the average. Finally, list the song names of these singers.",
      "pred": "SELECT T2.song_name FROM singer AS T1 JOIN singer AS T2 ON T1.age > (SELECT avg(age) FROM singer) AND T1.song_name = T2.song_name",
      "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are all the song names by singers who are older than average?",
      "query_plan": "First, find the average age of singers. Then, find the song names of singers who are older than the average age.",
      "pred": "SELECT T2.song_name FROM singer AS T1 JOIN singer AS T2 ON T1.age  >  (SELECT avg(age) FROM singer) AND T2.song_name = T1.song_name",
      "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "query_plan": "Use the stadium table and filter the rows where the capacity is between 5000 and 10000.",
      "pred": "SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "query_plan": "I would use a query plan to retrieve the locations and names of all stations with capacity between 5000 and 10000.",
      "pred": "SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the maximum capacity and the average of all stadiums ?",
      "query_plan": "Find the maximum capacity and the average of all stadiums.",
      "pred": "SELECT max(capacity) ,  avg(capacity) FROM stadium",
      "gold": "select max(capacity), average from stadium",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average and maximum capacities for all stadiums ?",
      "query_plan": "To find the average and maximum capacities for all stadiums, I would use the AVG and MAX functions respectively.",
      "pred": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
      "gold": "select avg(capacity) ,  max(capacity) from stadium",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "query_plan": "Find the name and capacity of the stadium with the highest average attendance.",
      "pred": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "query_plan": "Find the name and capacity of the stadium with the highest average attendance.",
      "pred": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many concerts are there in year 2014 or 2015?",
      "query_plan": "Count the number of concerts in the year 2014 or 2015.",
      "pred": "SELECT count(*) FROM concert WHERE year IN (2014,2015)",
      "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many concerts occurred in 2014 or 2015?",
      "query_plan": "Count the number of concerts in the concert table where the year is either 2014 or 2015.",
      "pred": "SELECT count(*) FROM concert WHERE YEAR  =  \"2014\" OR YEAR  =  \"2015\"",
      "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "query_plan": "To solve this question, we can use a join operation to combine the information from the stadium and concert tables. Then we can use a group by operation to count the number of concerts in each stadium.",
      "pred": "SELECT T1.name ,  COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.name",
      "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For each stadium, how many concerts play there?",
      "query_plan": "Count the number of concerts for each stadium.",
      "pred": "SELECT count(*) ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T2.location",
      "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "query_plan": "First, find the number of concerts in each stadium in year 2014 or after. Then, find the stadium with the maximum number of concerts. Finally, return the stadium name and capacity.",
      "pred": "SELECT T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >=  2014 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
      "query_plan": "First, find the stadium id of the stadium with the most concerts after 2013. Then, find the name and capacity of the stadium with that id.",
      "pred": "SELECT T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >  2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which year has most number of concerts?",
      "query_plan": "Count the number of concerts for each year. Find the year with the maximum count.",
      "pred": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the year that had the most concerts?",
      "query_plan": "Find the year that has the maximum number of concerts.",
      "pred": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the stadium names without any concert.",
      "query_plan": "To solve this question, we can use a LEFT JOIN to combine the stadium and concert tables. If there is no concert for a stadium, the result will be NULL. We can then filter out the stadiums with NULL.",
      "pred": "SELECT T1.name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.stadium_id IS NULL",
      "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names of the stadiums without any concerts?",
      "query_plan": "Use the stadium id and concert id to find the stadiums without any concerts.",
      "pred": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert) ORDER BY name",
      "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "query_plan": "To solve this question, I would first find the country of singers who are above age 40 and below age 30. Then I would find the distinct countries.",
      "pred": "SELECT DISTINCT country FROM singer WHERE age > 40 INTERSECT SELECT DISTINCT country FROM singer WHERE age < 30",
      "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "query_plan": "To solve this question, I would use a query plan that involves filtering and joining. First, I would find all stadiums that have a concert in year 2014. Then, I would find all stadiums and exclude those found in the first step.",
      "pred": "SELECT DISTINCT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year != 2014 EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year = 2014",
      "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "query_plan": "I would first find all the stadiums that had a concert in 2014. Then, I would find all the stadiums and exclude those that were in the list of stadiums that had a concert in 2014.",
      "pred": "SELECT DISTINCT T1.name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year != 2014",
      "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "query_plan": "To solve this question, I would use a query plan that involves joining the concert and singer in concert tables, and then grouping by the concert name and theme.",
      "pred": "SELECT T1.concert_name ,  T1.theme ,  COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_name ,  T1.theme",
      "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names , themes , and number of singers for every concert ?",
      "query_plan": "First, I would list all the concert names, themes, and number of singers. Then, I would join the concert and singer in concert tables based on the concert id. Finally, I would count the number of singers for each concert.",
      "pred": "SELECT T1.concert_name ,  T1.theme ,  (SELECT COUNT(*) FROM singer_in_concert AS T2 WHERE T2.concert_id = T1.concert_id) FROM concert AS T1 JOIN singer_in_concert AS T3 ON T1.concert_id = T3.concert_id GROUP BY T1.concert_id",
      "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List singer names and number of concerts for each singer.",
      "query_plan": "First, I would join the singer and singer in concert tables. Then, I would group the result by singer name. Finally, I would count the number of concerts for each singer.",
      "pred": "SELECT T1.name ,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name",
      "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the singers and number of concerts for each person?",
      "query_plan": "To find the names of the singers and the number of concerts for each person, we need to join the singer and singer in concert tables. Then we can group by the singer name and count the number of concerts.",
      "pred": "SELECT T1.name ,  COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name",
      "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List all singer names in concerts in year 2014.",
      "query_plan": "First, find all concerts in year 2014. Then, find all singers who were in these concerts. Finally, list the names of these singers.",
      "pred": "SELECT T2.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id WHERE T1.year  =  2014",
      "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "query_plan": "To find the names of the singers who performed in a concert in 2014, we need to join the singer in concert table with the singer table and the concert table. Then we can filter the records where the year of the concert is 2014.",
      "pred": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "query_plan": "To solve this question, I would use a query plan that involves joining the singer and song tables, and then filtering the results based on the song name.",
      "pred": "SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.id  =  T2.singer_id WHERE T2.name LIKE '%Hey%' GROUP BY T1.id",
      "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "query_plan": "To solve this question, I would use a query plan that involves filtering and joining. First, I would filter the singer table to include only singers whose song name contains the word 'Hey'. Then, I would join this filtered table with the singer table using the singer id as the key.",
      "pred": "SELECT T1.name ,  T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN song AS T3 ON T1.singer_id  =  T3.singer_id WHERE T3.name LIKE '%Hey%' GROUP BY T1.singer_id",
      "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "query_plan": "To solve this question, I would first find the stadiums that had concerts in both 2014 and 2015. Then, I would find the name and location of these stadiums.",
      "pred": "SELECT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  \"2014\" INTERSECT SELECT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  \"2015\"",
      "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "query_plan": "To solve this question, I would first find the stadiums that had concerts in both 2014 and 2015. Then, I would find the names and locations of these stadiums.",
      "pred": "SELECT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  \"2014\" INTERSECT SELECT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  \"2015\"",
      "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the number of concerts happened in the stadium with the highest capacity .",
      "query_plan": "First, find the stadium with the highest capacity. Then, count the number of concerts that occurred at this stadium.",
      "pred": "SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
      "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
      "query_plan": "First, find the stadium with the largest capacity. Then, count the number of concerts that occurred in this stadium.",
      "pred": "SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)",
      "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the number of pets whose weight is heavier than 10.",
      "query_plan": "To solve this question, we can use the COUNT function to count the number of pets. We also need to use the weight column to filter the pets.",
      "pred": "SELECT count(*) FROM pets WHERE weight  >  10",
      "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many pets have a greater weight than 10?",
      "query_plan": "To solve this question, I would use a query plan that involves finding the count of pets with a weight greater than 10.",
      "pred": "SELECT count(*) FROM pets WHERE weight  >  10",
      "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the weight of the youngest dog.",
      "query_plan": "To find the weight of the youngest dog, we need to find the pet with the smallest weight. We can do this by ordering the pets by weight in ascending order and then selecting the first one.",
      "pred": "SELECT weight FROM pets ORDER BY weight ASC LIMIT 1",
      "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How much does the youngest dog weigh?",
      "query_plan": "To find the weight of the youngest dog, we need to find the pet with the smallest weight. We can do this by ordering the pets by age and then by weight, and then selecting the first one.",
      "pred": "SELECT weight FROM pets ORDER BY pet_age ASC ,  weight ASC LIMIT 1",
      "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "query_plan": "To solve this question, we can use the GROUP BY and MAX functions. GROUP BY is used to group the data by pet type, and MAX is used to find the maximum weight for each group.",
      "pred": "SELECT MAX(weight) ,  pet_type FROM pets GROUP BY pet_type",
      "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List the maximum weight and type for each type of pet.",
      "query_plan": "To solve this question, we can use the GROUP BY and MAX functions. GROUP BY is used to group the data by pet type, and MAX is used to find the maximum weight for each group.",
      "pred": "SELECT pettype ,  max(weight) FROM pets GROUP BY pettype",
      "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find number of pets owned by students who are older than 20.",
      "query_plan": "To solve this question, we need to find the number of pets owned by students who are older than 20. We can use the following query plan:",
      "pred": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.age  >  20",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many pets are owned by students that have an age greater than 20?",
      "query_plan": "To solve this question, we need to find the number of pets owned by students that have an age greater than 20. We can use a join operation to combine the pets owned by students and the students themselves. Then we can use a filter operation to select only the students that have an age greater than 20. Finally, we can use a count operation to find the number of pets owned by these students.",
      "pred": "SELECT count(*) FROM pets JOIN has_pet ON pets.pet_id  =  has_pet.pet_id JOIN student ON has_pet.stu_id  =  student.stu_id WHERE student.age  >  20",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "query_plan": "To solve this question, we need to find the number of pets that are dogs and are raised by female students. We can use the pet type and sex information from the pets table to filter the results. We also need to find the pets that are raised by students, which can be done using the has pet table.",
      "pred": "SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.pet_id  =  T2.pet_id WHERE T1.pet_type  =  \"dog\" AND T2.sex  =  \"F\"",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many dog pets are raised by female students?",
      "query_plan": "To solve this question, we need to find the number of pets that are dogs and are raised by female students. We can use the pet type and sex information from the pets table and the pet id from the has pet table to find the corresponding pets.",
      "pred": "SELECT count(*) FROM pets WHERE pet_type  =  \"dog\" INTERSECT SELECT pet_id FROM has_pet WHERE student_id IN (SELECT student_id FROM student WHERE sex  =  \"F\")",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the number of distinct type of pets.",
      "query_plan": "To find the number of distinct type of pets, we need to count the number of distinct pet types in the pets table.",
      "pred": "SELECT count(DISTINCT pet_type) FROM pets",
      "gold": "SELECT count(DISTINCT pettype) FROM pets",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many different types of pet are there?",
      "query_plan": "To find the number of different types of pet, we need to count the number of distinct pet types in the pets table.",
      "pred": "SELECT COUNT(DISTINCT pet_type) FROM pets",
      "gold": "SELECT count(DISTINCT pettype) FROM pets",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name of students who have cat or dog pet.",
      "query_plan": "To solve this question, I would first look at the schema to understand the relationships between the tables. I would then write a SQL query to find the first name of students who have pet type of cat or dog.",
      "pred": "SELECT T1.fname FROM student AS T1 JOIN pets AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = \"cat\" OR T2.pettype = \"dog\" GROUP BY T1.fname",
      "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "query_plan": "To find the first names of students who have pets, we need to join the students and pets tables. We can use the has pet table to find the students who have pets. Then we can select the first names of these students.",
      "pred": "SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"cat\" OR T3.pettype  =  \"dog\" GROUP BY T1.fname",
      "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the first name of students who have both cat and dog pets .",
      "query_plan": "To solve this question, we can use a join operation to combine the pet type of students with the pet type of dogs. Then we can use the result to find the first name of students.",
      "pred": "SELECT T1.firstname FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  \"dog\" INTERSECT SELECT T1.firstname FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  \"cat\"",
      "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "query_plan": "To solve this question, we can use SQL query. We need to find the first names of students who have pets. We can use the has pet table to find the students who have pets. Then we can find the students who have both cats and dogs.",
      "pred": "SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"cat\" INTERSECT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"dog\"",
      "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the major and age of students who do not have a cat pet.",
      "query_plan": "To solve this question, I would use a query plan that involves joining the student table with the pets table. The join condition would be the pet id. Then, I would filter out the students who do not have a pet. Finally, I would select the major and age of these students.",
      "pred": "SELECT major ,  age FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.petid WHERE T2.petid  IS NULL",
      "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "query_plan": "To solve this question, I would use a query plan that involves filtering and joining. First, I would filter out the students who do not own a pet. Then, I would join the student table with the pets owned by these students. Finally, I would select the major of these students and their age.",
      "pred": "SELECT T1.Major ,  T1.Age FROM student AS T1 JOIN pets AS T2 ON T1.StuID  =  T2.StuID WHERE T2.PetType  =  \"cat\"",
      "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the id of students who do not have a cat pet.",
      "query_plan": "To solve this question, we can use a query plan that involves filtering and finding. We can use the NOT IN clause to find students who do not have a pet of type cat.",
      "pred": "SELECT T1.stuID FROM student AS T1 EXCEPT SELECT T1.stuID FROM has_pet AS T1 JOIN pets AS T2 ON T1.petID  =  T2.petID WHERE T2.petType  =  \"cat\"",
      "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the ids of the students who do not own cats as pets?",
      "query_plan": "To find the ids of the students who do not own cats as pets, we can use a query plan that involves using a subquery to find the ids of students who own pets, and then using a set operation to find the ids of students who do not own pets.",
      "pred": "SELECT T1.stu_id FROM student AS T1 EXCEPT SELECT T1.stu_id FROM pets AS T1 JOIN has_pet AS T2 ON T1.pet_id  =  T2.pet_id WHERE T1.pet_type  =  \"cat\"",
      "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "query_plan": "To solve this question, I would use a query plan that involves joining the students and pets tables, and then filtering the results based on the pet type.",
      "pred": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  \"dog\" EXCEPT SELECT T1.fname ,  T1.age FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  \"cat\"",
      "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "query_plan": "To solve this question, we can use a query plan that involves filtering, joining, and selecting.",
      "pred": "SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"dog\" EXCEPT SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"cat\"",
      "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the type and weight of the youngest pet.",
      "query_plan": "To find the type and weight of the youngest pet, we need to find the pet with the smallest weight. We can do this by ordering the pets by weight in ascending order and then selecting the first one.",
      "pred": "SELECT pet_type ,  weight FROM pets ORDER BY weight ASC LIMIT 1",
      "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "query_plan": "To find out the type of pet that is the youngest, we need to find the pet with the smallest weight. To do this, we can use the MIN function to find the smallest weight. To find the type of this pet, we can use the result of the query to find the pet with this smallest weight.",
      "pred": "SELECT pet_type ,  weight FROM pets WHERE weight = (SELECT min(weight) FROM pets)",
      "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "query_plan": "To find the id and weight of all pets whose age is older than 1, we need to look at the pets table. We can use a query plan that involves selecting the pet id and weight from the pets table.",
      "pred": "SELECT pet_id ,  weight FROM pets WHERE pet_age  >  1",
      "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the id and weight of every pet who is older than 1?",
      "query_plan": "To find the id and weight of every pet who is older than 1, we need to look at the pets table. We can use the condition that pet age is greater than 1 to filter the results.",
      "pred": "SELECT pet_id ,  weight FROM pets WHERE pet_age  >  1",
      "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the average and maximum age for each type of pet.",
      "query_plan": "To find the average and maximum age for each type of pet, we need to join the pets table with the pet type. Then we can group by pet type and calculate the average and maximum age.",
      "pred": "SELECT petType ,  avg(weight) ,  max(weight) FROM pets AS T1 JOIN pets AS T2 ON T1.petID  =  T2.petID GROUP BY petType",
      "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average and maximum age for each pet type?",
      "query_plan": "To find the average and maximum age for each pet type, we need to join the pets table with the pet owners. Then group by pet type and calculate the average and maximum age.",
      "pred": "SELECT petType ,  avg(age) ,  max(age) FROM pets JOIN petOwners ON pets.petID  =  petOwners.petID GROUP BY petType",
      "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the average weight for each pet type.",
      "query_plan": "To find the average weight for each pet type, we need to join the pets table with the pet owners. Then group by pet type and calculate the average weight.",
      "pred": "SELECT pettype ,  avg(weight) FROM pets JOIN petowners ON pets.petid  =  petowners.petid GROUP BY pettype",
      "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average weight for each type of pet?",
      "query_plan": "To find the average weight for each type of pet, we need to join the pets table with the pet type. Then, we can group by pet type and calculate the average weight.",
      "pred": "SELECT petType ,  avg(weight) FROM pets GROUP BY petType",
      "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name and age of students who have a pet.",
      "query_plan": "To find the first name and age of students who have a pet, we can use the student and pets tables. We can join these tables on the student id. This will give us the first name and age of students along with the pet type and age of their pets.",
      "pred": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.stuid",
      "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the different first names and ages of the students who do have pets?",
      "query_plan": "To find the different first names and ages of the students who do have pets, we need to look at the students who have pets. We can use the has pet relation to find these students. Then we can use the student relation to find the first names and ages of these students.",
      "pred": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid IS NOT NULL",
      "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "query_plan": "To solve this question, I would first find the id of the student named 'Smith'. Then, I would find the pet id associated with that student.",
      "pred": "SELECT pet_id FROM student WHERE lname  =  'Smith' INTERSECT SELECT pet_id FROM has_pet WHERE student_id  =  (SELECT student_id FROM student WHERE lname  =  'Smith')",
      "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "query_plan": "First, find the id of the student whose last name is 'Smith'. Then, find the pet id of the student.",
      "pred": "SELECT pet_id FROM student WHERE lname  =  'Smith' INTERSECT SELECT pet_id FROM has_pet WHERE student_id  =  (SELECT student_id FROM student WHERE lname  =  'Smith')",
      "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the number of pets for each student who has any pet and student id.",
      "query_plan": "To find the number of pets for each student who has any pet, we need to count the number of pets for each student. We can use the COUNT function to do this. We also need to include the student id.",
      "pred": "SELECT T1.stuID ,  COUNT(*) FROM student AS T1 JOIN haspet AS T2 ON T1.stuID  =  T2.stuID GROUP BY T1.stuID",
      "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
      "query_plan": "To solve this question, we can use a join operation to combine the students and pets tables based on the student id. Then we can use a group by operation to count the number of pets for each student. Finally, we can use a projection operation to list the student ids instead of names.",
      "pred": "SELECT T1.stu_id ,  count(*) FROM student AS T1 JOIN pets AS T2 ON T1.stu_id  =  T2.stu_id GROUP BY T1.stu_id",
      "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name and gender of student who have more than one pet.",
      "query_plan": "To solve this question, we can use a group by statement to count the number of pets each student has. Then we can filter out the students who have more than one pet.",
      "pred": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "query_plan": "To solve this question, I would first find all the students who have more than one pet. Then, I would find the first name and gender of these students.",
      "pred": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the last name of the student who has a cat that is age 3.",
      "query_plan": "To solve this question, I would first need to find the pet id of the pet type that is cat. Then, I would find the student id of the student who has this pet. Finally, I would find the last name of the student with this student id.",
      "pred": "SELECT T1.lname FROM student AS T1 JOIN pets AS T2 ON T1.stuid  =  T2.stuid WHERE T2.pettype  =  \"cat\" ORDER BY T1.lname DESC LIMIT 1",
      "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "query_plan": "To solve this question, I would first find the pet id of the pet type \"cat\". Then, I would find the student id of the student who has this pet. Finally, I would find the last name of the student with this student id.",
      "pred": "SELECT T1.lname FROM student AS T1 JOIN pets AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = \"cat\" AND T2.petage = 3",
      "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the average age of students who do not have any pet .",
      "query_plan": "To solve this question, we can use the AVG function to find the average age. We also need to exclude students who have pets. We can use a subquery to find students who have pets. Then we can find the average age of students who do not have pets.",
      "pred": "SELECT avg(age) FROM student WHERE student_id NOT IN (SELECT student_id FROM has_pet) AND student_id NOT IN (SELECT student_id FROM pets)",
      "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average age for all students who do not own any pets ?",
      "query_plan": "To solve this question, we can use SQL query. We need to find the average age of students who do not own any pets. We can use the LEFT JOIN to find students who do not own any pets. Then we can use the AVG function to find the average age.",
      "pred": "SELECT avg(T1.age) FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T2.petid IS NULL",
      "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many continents are there?",
      "query_plan": "Count the number of rows in the continents table.",
      "pred": "SELECT count(*) FROM continents",
      "gold": "SELECT count(*) FROM CONTINENTS;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the number of continents?",
      "query_plan": "Count the number of rows in the continents table.",
      "pred": "SELECT count(*) FROM continents",
      "gold": "SELECT count(*) FROM CONTINENTS;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "query_plan": "To solve this question, I would first find the number of countries in each continent. Then, I would list the continent id, continent name, and the number of countries.",
      "pred": "SELECT Continent ,  COUNT(*) FROM countries GROUP BY Continent",
      "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For each continent, list its id, name, and how many countries it has?",
      "query_plan": "To solve this question, I would first join the tables \"continents\" and \"countries\" using the common attribute \"cont id\". Then, I would group the results by \"cont id\" and \"continent\". Finally, I would count the number of countries in each continent.",
      "pred": "SELECT T1.cont_id ,  T1.continent ,  COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.cont_id  =  T2.cont_id GROUP BY T1.cont_id ,  T1.continent",
      "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many countries are listed?",
      "query_plan": "Count the number of countries listed in the countries table.",
      "pred": "SELECT count(*) FROM countries",
      "gold": "SELECT count(*) FROM COUNTRIES;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many countries exist?",
      "query_plan": "Count the number of countries in the countries table.",
      "pred": "SELECT count(*) FROM countries",
      "gold": "SELECT count(*) FROM COUNTRIES;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "query_plan": "To solve this question, I would first find the number of models produced by each maker. Then, I would join this information with the full name of the car maker.",
      "pred": "SELECT T1.full_name, T1.id, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id",
      "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "query_plan": "To solve this question, I would join the car makers table with the model list table using the id column of car makers and the make column of model list. Then, I would group the results by the full name of the car maker and count the number of models produced by each.",
      "pred": "SELECT T1.full_name ,  T1.id ,  COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.make GROUP BY T1.full_name ,  T1.id",
      "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which model of the car has the minimum horsepower?",
      "query_plan": "To find the model of the car with the minimum horsepower, we need to look at the cars data. We can use the MIN function to find the smallest horsepower.",
      "pred": "SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "query_plan": "First, find the car with the smallest amount of horsepower. Then, find the model name of that car.",
      "pred": "SELECT T1.make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id = T2.id ORDER BY T2.horsepower ASC LIMIT 1",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the model of the car whose weight is below the average weight.",
      "query_plan": "First, calculate the average weight of all cars. Then, find the car whose weight is below the average.",
      "pred": "SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1",
      "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the model for the car with a weight smaller than the average?",
      "query_plan": "First, find the average weight of all cars. Then, find the car with a weight smaller than the average. Finally, find the model of this car.",
      "pred": "SELECT T1.model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id WHERE T2.weight  <  (SELECT avg(weight) FROM cars_data) LIMIT 1",
      "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "query_plan": "To solve this question, I would join the tables that contain the information about car makers and cars. Then, I would filter the results based on the year of the cars.",
      "pred": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN car_names AS T2 ON T1.id = T2.make WHERE T2.year = 1970",
      "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "exact": false,
      "valid": true,
      "exec_match": false
    }
  ]
}