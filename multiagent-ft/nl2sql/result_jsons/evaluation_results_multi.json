{
  "aggregates": {
    "exact_match": 0.178,
    "valid_sql": 0.626,
    "execution_match": 0.278
  },
  "examples": [
    {
      "question": "How many singers do we have?",
      "pred": "SELECT count(*) FROM singer;",
      "gold": "SELECT count(*) FROM singer",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the total number of singers?",
      "pred": "SELECT count(*) FROM singer;",
      "gold": "SELECT count(*) FROM singer",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
      "pred": "SELECT name, country, age FROM singer ORDER BY age DESC;",
      "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names, countries, and ages for every singer in descending order of age?",
      "pred": "SELECT name, country, age FROM singer ORDER BY age DESC;",
      "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average, minimum, and maximum age of all singers from France?",
      "pred": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'\n\n### NeededColumns:\nsinger: age\n\n### SQL:\nSELECT avg(age) FROM singer WHERE country  =  'France'\n\n### NeededColumns:\nsinger: age\n\n### SQL:\nSELECT min(age) FROM singer WHERE country  =  'France'\n\n### NeededColumns:\nsinger: age\n\n### SQL:\nSELECT max(age) FROM singer WHERE country  =  'France';",
      "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average, minimum, and maximum age for all French singers?",
      "pred": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  \"France\"\n\n### NeededColumns:\nsinger: name, age\n\n### SQL:\nSELECT name ,  age FROM singer WHERE country  =  \"France\"\n\n### NeededColumns:\nsinger: name, age\n\n### SQL:\nSELECT name ,  age FROM singer WHERE country  =  \"France\"\n\n### NeededColumns:\nsinger: name, age\n\n### SQL:\nSELECT name ,  age FROM singer WHERE country;",
      "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the name and the release year of the song by the youngest singer.",
      "pred": "SELECT name, song_name, song_release_year FROM singer ORDER BY age ASC LIMIT 1;",
      "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names and release years for all the songs of the youngest singer?",
      "pred": "SELECT name, song_name, song_release_year FROM singer ORDER BY age ASC LIMIT 1;",
      "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are all distinct countries where singers above age 20 are from?",
      "pred": "SELECT DISTINCT country FROM singer WHERE age  >  20;",
      "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are  the different countries with singers above age 20?",
      "pred": "SELECT DISTINCT country FROM singer WHERE age  >  20;",
      "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show all countries and the number of singers in each country.",
      "pred": "SELECT country ,  count(*) FROM singer GROUP BY country\n\n### NeededColumns:\nsinger: singer id, name, country, song name, song release year, age, is male\n\n### SQL:\nSELECT count(*) FROM singer WHERE is_male  = 1\n\n### NeededColumns:\nsinger: singer id, name, country, song name, song release year, age, is male\n\n### SQL:\nSELECT count(*) FROM singer WHERE is_male  = 0\n\n### NeededColumns:\nsinger: singer id, name, country,;",
      "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many singers are from each country?",
      "pred": "SELECT country ,  count(*) FROM singer GROUP BY country;",
      "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List all song names by singers above the average age.",
      "pred": "SELECT name FROM singer WHERE age  >  (SELECT avg(age) FROM singer) AND is_male = \"Yes\" INTERSECT SELECT name FROM singer WHERE age  >  (SELECT avg(age) FROM singer) AND is_male = \"No\";",
      "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are all the song names by singers who are older than average?",
      "pred": "SELECT name, song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\n\n### NeededColumns:\n\n\n### SQL:\n\n\nFROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id  =  t2.stadium_id JOIN singer_in_concert AS t3 ON t1.concert_id  =  t3.concert_id JOIN singer AS t4 ON t3.singer_id  =  t4.singer_id WHERE t2.lowest  <  t2.capacity;",
      "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
      "pred": "SELECT location FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
      "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
      "pred": "SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;",
      "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the maximum capacity and the average of all stadiums ?",
      "pred": "SELECT max(capacity) FROM stadium;",
      "gold": "select max(capacity), average from stadium",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average and maximum capacities for all stadiums ?",
      "pred": "SELECT avg(capacity) ,  max(capacity) FROM stadium\n\n### NeededColumns:\nstadium.capacity\n\n### SQL:\nSELECT avg(capacity) ,  max(capacity) FROM stadium\n\n### NeededColumns:\nsinger: age, is male\n\n### SQL:\nSELECT avg(age) ,  max(is_male) FROM singer\n\n### NeededColumns:\nsinger: name, country, song name, song release year, age, is male\n\n### SQL:\nSELECT avg(age;",
      "gold": "select avg(capacity) ,  max(capacity) from stadium",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name and capacity for the stadium with highest average attendance?",
      "pred": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;",
      "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name and capacity for the stadium with the highest average attendance?",
      "pred": "SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;",
      "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many concerts are there in year 2014 or 2015?",
      "pred": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;",
      "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many concerts occurred in 2014 or 2015?",
      "pred": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;",
      "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the stadium name and the number of concerts in each stadium.",
      "pred": "SELECT T1.name ,  count(T2.stadium_id) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\n\n### NeededColumns:\nstadium.name, count(concert.concert_id)\n\n### SQL:\nSELECT T1.name ,  count(T2.concert_id) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id;",
      "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "For each stadium, how many concerts play there?",
      "pred": "SELECT count(*) ,  T1.stadium_id FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\n\n### NeededColumns:\nstadium id\n\n### SQL:\nSELECT count(*) ,  stadium_id FROM concert GROUP BY stadium_id\n\n### NeededColumns:\nsinger_id\n\n### SQL:\nSELECT count(*) ,  singer_id FROM singer_in_concert GROUP BY singer_id\n\n### Need;",
      "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
      "pred": "SELECT T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >=  2014 ORDER BY T2.year DESC LIMIT 1\n\n### NeededColumns:\nstadium.name, stadium.capacity\n\n### SQL:\nSELECT T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE;",
      "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
      "pred": "SELECT T1.name ,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >  2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1\n\n### NeededColumns:\nsinger: name, country, song name, song release year, age, is male\n\n### Question:\nWhat are the names and countries of singers who are not male?\n\n### SQL:\nSELECT name ,  country;",
      "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which year has most number of concerts?",
      "pred": "SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the year that had the most concerts?",
      "pred": "SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the stadium names without any concert.",
      "pred": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\n\n### NeededColumns:\nsinger: name\n\n### SQL:\nSELECT name FROM singer WHERE name NOT IN (SELECT name FROM concert)\n\n### NeededColumns:\nconcert: concert name\n\n### SQL:\nSELECT concert_name FROM concert WHERE concert_id NOT IN (SELECT concert_id FROM singer_in_concert)\n\n### NeededColumns:\nsinger_in_concert: singer_id\n\n### SQL:\nSELECT singer_id FROM singer;",
      "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the stadiums without any concerts?",
      "pred": "SELECT name FROM stadium WHERE concert_id NOT IN (SELECT concert_id FROM concert)\n\n### NeededColumns:\nstadium: name\nconcert: concert name\n\n### SQL:\nSELECT T1.name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.concert_id IS NULL\n\n### NeededColumns:\nsinger: name\nconcert: concert name\nsinger_in_concert: is_in_concert\n\n### SQL:\nSELECT;",
      "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
      "pred": "SELECT country FROM singer WHERE age  >  40 UNION SELECT country FROM singer WHERE age  <  30;",
      "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
      "pred": "SELECT name FROM stadium EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year != 2014;",
      "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of all stadiums that did not have a concert in 2014?",
      "pred": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014)\n\n### NeededColumns:\nstadium.name\n\n### SQL:\nSELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014)\n\n### NeededColumns:\nsinger: singer id, name, country, song name, song release year, age, is male\n\n### SQL:\nSELECT name FROM singer WHERE is_male  =  1;",
      "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the name and theme for all concerts and the number of singers in each concert.",
      "pred": "SELECT T1.concert_name ,  T1.theme ,  count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id\n\n### NeededColumns:\nconcert.concert_name, concert.theme, count(singer_in_concert.singer_id)\n\n### SQL:\nSELECT T1.concert_name ,  T1.theme ,  count(*) FROM concert AS T1 JOIN singer_;",
      "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names , themes , and number of singers for every concert ?",
      "pred": "SELECT T1.concert_name ,  T1.theme ,  T2.count FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T1.concert_id ORDER BY T2.count DESC;",
      "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List singer names and number of concerts for each singer.",
      "pred": "SELECT T1.name ,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name\n\n### NeededTables:\nconcert, singer\n\n### SQL:\nSELECT T1.name ,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name\n\n### NeededTables:\nsinger_in;",
      "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the singers and number of concerts for each person?",
      "pred": "SELECT T1.name ,  COUNT(T2.concert_id) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name\n\n### NeededTables:\nconcert, singer_in_concert, singer\n\n### SQL:\nSELECT T1.name ,  COUNT(T2.concert_id) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer;",
      "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "List all singer names in concerts in year 2014.",
      "pred": "SELECT T2.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.year  =  2014;",
      "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "pred": "SELECT T1.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T3.year  =  2014;",
      "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
      "pred": "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### Need;",
      "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
      "pred": "SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE song_name LIKE '%Hey%'\n\n### Need;",
      "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "pred": "SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE YEAR = 2014) INTERSECT SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE YEAR = 2015);",
      "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
      "pred": "SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE YEAR = 2014) INTERSECT SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE YEAR = 2015)\n\n### NeededColumns:\nsinger: name, country\n\n### SQL:\nSELECT name, country FROM singer WHERE is_male = 1\n\n### NeededColumns:\nconcert: year\n\n### SQL:\nSELECT YEAR FROM concert WHERE YEAR =;",
      "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of concerts happened in the stadium with the highest capacity .",
      "pred": "SELECT count(*) FROM stadium WHERE capacity  =  (SELECT max(capacity) FROM stadium)\n\n### NeededColumns:\nstadium: name\nconcert: concert name\n\n### SQL:\nSELECT T2.concert_name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.capacity  =  (SELECT max(capacity) FROM stadium)\n\n### NeededColumns:\nsinger: name\nsinger_in_concert: concert_id\nconcert;",
      "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
      "pred": "SELECT count(*) FROM stadium WHERE capacity  =  (SELECT max(capacity) FROM stadium)\n\n### NeededColumns:\nsinger: age\n\n### SQL:\nSELECT count(*) FROM singer WHERE age  =  (SELECT min(age) FROM singer)\n\n### NeededColumns:\nsinger: name\n\n### SQL:\nSELECT count(*) FROM singer WHERE name  =  (SELECT min(name) FROM singer)\n\n### NeededColumns:\nstadium: location\n\n### SQL:\nSELECT count(*) FROM stadium WHERE location  =  (SELECT min;",
      "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of pets whose weight is heavier than 10.",
      "pred": "SELECT count(*) FROM pets WHERE pet_age  >  10;",
      "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many pets have a greater weight than 10?",
      "pred": "SELECT count(*) FROM pets WHERE weight  >  10;",
      "gold": "SELECT count(*) FROM pets WHERE weight  >  10",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the weight of the youngest dog.",
      "pred": "SELECT weight FROM pets WHERE pet_type  =  \"dog\" ORDER BY pet_age ASC LIMIT 1;",
      "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How much does the youngest dog weigh?",
      "pred": "SELECT weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets) AND pet_type  =  \"dog\" LIMIT 1;",
      "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
      "pred": "SELECT T1.pet_type ,  max(T1.weight) FROM PETS AS T1 GROUP BY T1.pet_type\n\n### NeededColumns:\npets.pet_type, pets.weight\n\n### SQL:\nSELECT T1.pet_type ,  T1.weight FROM PETS AS T1 ORDER BY T1.pet_type\n\n### NeededColumns:\npets.pet_type, pets.weight\n\n### SQL:\nSELECT T1.pet_type ,  max(T1.weight) FROM PETS AS;",
      "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "List the maximum weight and type for each type of pet.",
      "pred": "SELECT pet_type ,  max(weight) FROM PETS GROUP BY pet_type\n\n### NeededColumns:\npets.pet_type, pets.pet_age\n\n### SQL:\nSELECT pet_type ,  pet_age FROM PETS WHERE pet_type  =  'cat'\n\n### NeededColumns:\npets.pet_type, pets.weight\n\n### SQL:\nSELECT pet_type ,  weight FROM PETS ORDER BY weight DESC LIMIT 1\n\n### NeededColumns:\npets.pet_type, pets.weight;",
      "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find number of pets owned by students who are older than 20.",
      "pred": "SELECT count(*) FROM pets WHERE pet_id IN (SELECT pet_id FROM has_pet WHERE student_id IN (SELECT student_id FROM student WHERE age  >  20))\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM pets WHERE pet_id IN (SELECT pet_id FROM has_pet WHERE student_id IN (SELECT student_id FROM student WHERE age  >  20))\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM pets WHERE pet_id IN (SELECT pet_id FROM has_pet;",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many pets are owned by students that have an age greater than 20?",
      "pred": "SELECT count(*) FROM pets AS T1 JOIN has_pet AS T2 ON T1.pet_id  =  T2.pet_id JOIN student AS T3 ON T2.student_id  =  T3.student_id WHERE T3.age  >  20;",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "pred": "SELECT count(*) FROM pets WHERE pet_type  =  \"dog\" INTERSECT SELECT T1.pet_id FROM pets AS T1 JOIN has_pet AS T2 ON T1.pet_id  =  T2.pet_id JOIN student AS T3 ON T2.stu_id  =  T3.stu_id WHERE T3.sex  =  \"F\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM pets WHERE pet_type  =  \"dog\" INTERSECT SELECT T1.pet_id FROM pets AS;",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many dog pets are raised by female students?",
      "pred": "SELECT count(*) FROM pets WHERE pet_type  =  \"dog\" AND pet_id IN (SELECT pet_id FROM has_pet WHERE student_id IN (SELECT student_id FROM student WHERE sex  =  \"F\"));",
      "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the number of distinct type of pets.",
      "pred": "SELECT count(DISTINCT pet_type) FROM pets;",
      "gold": "SELECT count(DISTINCT pettype) FROM pets",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many different types of pet are there?",
      "pred": "SELECT count(DISTINCT pet_type) FROM pets;",
      "gold": "SELECT count(DISTINCT pettype) FROM pets",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name of students who have cat or dog pet.",
      "pred": "SELECT T1.first_name FROM student AS T1 JOIN pets AS T2 ON T1.student_id  =  T2.pet_id WHERE T2.pet_type  =  'cat' OR T2.pet_type  =  'dog' GROUP BY T1.first_name;",
      "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the first names of every student who has a cat or dog as a pet?",
      "pred": "SELECT T1.first_name FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type  =  'cat' OR T3.pet_type  =  'dog'\n\n### NeededColumns:\nfirst name\n\n### SQL:\nSELECT first_name FROM student WHERE stu_id IN (SELECT stu_id FROM has_pet WHERE pet_id IN (SELECT pet_id;",
      "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name of students who have both cat and dog pets .",
      "pred": "SELECT T1.first_name FROM student AS T1 JOIN pets AS T2 ON T1.student_id IN (SELECT student_id FROM has_pet WHERE pet_id IN (SELECT pet_id FROM pets WHERE pet_type  =  'cat') INTERSECT SELECT student_id FROM has_pet WHERE pet_id IN (SELECT pet_id FROM pets WHERE pet_type  =  'dog'));",
      "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the students' first names who have both cats and dogs as pets?",
      "pred": "SELECT T1.first_name FROM student AS T1 JOIN pets AS T2 ON T1.student_id IN (SELECT student_id FROM has_pet WHERE pet_id IN (SELECT pet_id FROM pets WHERE pet_type  =  \"cat\") INTERSECT SELECT student_id FROM has_pet WHERE pet_id IN (SELECT pet_id FROM pets WHERE pet_type  =  \"dog\"))\n\n### NeededTables:\nhas pet, pets, student\n\n### SQL:\nSELECT T1.first_name FROM student AS T1 JOIN has_pet AS T;",
      "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the major and age of students who do not have a cat pet.",
      "pred": "SELECT major ,  age FROM student WHERE student_id NOT IN (SELECT T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type  =  'cat')\n\n### NeededColumns:\nstudent.student id, student.major, student.age\n\n### SQL:\nSELECT major ,  age FROM student WHERE student_id NOT IN (SELECT T1;",
      "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
      "pred": "SELECT first_name, last_name, major, age FROM student WHERE student_id NOT IN (SELECT T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type  =  'cat')\n\n### NeededColumns:\nstudent.first_name, student.last_name, student.major, student.age\n\n### SQL:\nSELECT first_name;",
      "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the id of students who do not have a cat pet.",
      "pred": "SELECT T1.student_id FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id INNER JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type != \"cat\" GROUP BY T1.student_id HAVING count(*)  =  count(*)\n\n### NeededTables:\nstudent, pets, has_pet\n\n### SQL:\nSELECT T1.student_id FROM student AS T;",
      "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids of the students who do not own cats as pets?",
      "pred": "SELECT student_id FROM student EXCEPT SELECT T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type  =  'cat'\n\n### NeededColumns:\nstudent.student id\n\n### SQL:\nSELECT student_id FROM student EXCEPT SELECT T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1;",
      "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "pred": "SELECT T1.first_name ,  T1.age FROM student AS T1 JOIN pets AS T2 ON T1.student_id  =  T2.pet_id WHERE T2.pet_type  =  'dog' EXCEPT SELECT T1.first_name ,  T1.age FROM student AS T1 JOIN pets AS T2 ON T1.student_id  =  T2.pet_id WHERE T2.pet_type  =  'cat'\n\n### NeededColumns:\nstudent.first_name ,  student.age\n\n### SQL:;",
      "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the first name of every student who has a dog but does not have a cat?",
      "pred": "SELECT T1.first_name FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type  =  \"dog\" EXCEPT SELECT T1.first_name FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T;",
      "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the type and weight of the youngest pet.",
      "pred": "SELECT pet_type ,  weight FROM pets ORDER BY weight LIMIT 1;",
      "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What type of pet is the youngest animal, and how much does it weigh?",
      "pred": "SELECT pet_type ,  weight FROM pets ORDER BY weight LIMIT 1;",
      "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "pred": "SELECT pet_id ,  weight FROM pets WHERE pet_age  >  1;",
      "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the id and weight of every pet who is older than 1?",
      "pred": "SELECT pet_id ,  weight FROM pets WHERE pet_age  >  1;",
      "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the average and maximum age for each type of pet.",
      "pred": "SELECT pet_type ,  avg(pet_age) ,  max(pet_age) FROM pets GROUP BY pet_type;",
      "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average and maximum age for each pet type?",
      "pred": "SELECT pet_type ,  avg(weight) ,  max(weight) FROM pets GROUP BY pet_type\n\n### NeededColumns:\npets.pet type, average weight, maximum weight\n\n### SQL:\nSELECT pet_type ,  avg(weight) ,  max(weight) FROM pets GROUP BY pet_type\n\n### NeededColumns:\npets.pet type, average weight, maximum weight\n\n### SQL:\nSELECT pet_type ,  avg(weight) ,  max(weight) FROM pets GROUP BY pet;",
      "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average weight for each pet type.",
      "pred": "SELECT pet_type ,  avg(weight) FROM pets GROUP BY pet_type;",
      "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average weight for each type of pet?",
      "pred": "SELECT pet_type ,  avg(weight) FROM pets GROUP BY pet_type\n\n### NeededColumns:\npets.pet_type, pets.pet_age, pets.weight\n\n### SQL:\nSELECT pet_type ,  pet_age ,  weight FROM pets\n\n### NeededColumns:\npets.pet_id, pets.pet_type, pets.pet_age, pets.weight\n\n### SQL:\nSELECT pet_id ,  pet_type ,  pet_age ,  weight FROM pets\n\n### NeededColumns:\npets.;",
      "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name and age of students who have a pet.",
      "pred": "SELECT T1.first_name ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id GROUP BY T1.stu_id HAVING count(*)  >  0;",
      "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the different first names and ages of the students who do have pets?",
      "pred": "SELECT DISTINCT T1.first_name ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_type  =  'dog'\n\n### NeededColumns:\nstudent.first_name ,  student.age\n\n### SQL:\nSELECT DISTINCT first_name ,  age FROM student WHERE stu_id IN (SELECT stu_id;",
      "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
      "pred": "SELECT T2.pet_id FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T1.lname  =  'Smith'\n\n### NeededColumns:\npets.pet_id\n\n### SQL:\nSELECT pet_id FROM pets WHERE pet_type  =  'cat'\n\n### NeededColumns:\npets.pet_id\n\n### SQL:\nSELECT pet_id FROM;",
      "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
      "pred": "SELECT T2.pet_id FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id JOIN pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T1.lname  =  'Smith'\n\n### NeededColumns:\npets.pet_id\n\n### SQL:\nSELECT pet_id FROM pets WHERE pet_type  =  'cat'\n\n### NeededColumns:\npets.pet_id\n\n### SQL:\nSELECT pet_id FROM;",
      "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of pets for each student who has any pet and student id.",
      "pred": "SELECT count(*) ,  T1.student_id FROM pets AS T1 JOIN has_pet AS T2 ON T1.pet_id  =  T2.pet_id GROUP BY T2.student_id;",
      "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
      "pred": "SELECT count(*) ,  T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id\n\n### NeededColumns:\nstudent.student_id\n\n### SQL:\nSELECT count(*) ,  T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id\n\n### Needed;",
      "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name and gender of student who have more than one pet.",
      "pred": "SELECT T1.first_name ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id GROUP BY T1.stu_id HAVING count(*)  >  1;",
      "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the first name and gender of the all the students who have more than one pet?",
      "pred": "SELECT T1.first_name ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stu_id  =  T2.stu_id GROUP BY T1.stu_id HAVING count(*)  >  1;",
      "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the last name of the student who has a cat that is age 3.",
      "pred": "SELECT T1.lname FROM student AS T1 JOIN pets AS T2 ON T1.pet_id  =  T2.pet_id WHERE T2.pet_age  =  3;",
      "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the last name of the student who has a cat that is 3 years old?",
      "pred": "SELECT T1.lname FROM student AS T1 JOIN pets AS T2 ON T1.pet_id  =  T2.pet_id WHERE T2.pet_age  =  3;",
      "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the average age of students who do not have any pet .",
      "pred": "SELECT avg(age) FROM student WHERE student_id NOT IN (SELECT student_id FROM has_pet);",
      "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average age for all students who do not own any pets ?",
      "pred": "SELECT avg(age) FROM student WHERE student_id NOT IN (SELECT T1.student_id FROM student AS T1 JOIN has_pet AS T2 ON T1.student_id  =  T2.student_id);",
      "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many continents are there?",
      "pred": "SELECT count(DISTINCT cont_id) FROM continents;",
      "gold": "SELECT count(*) FROM CONTINENTS;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the number of continents?",
      "pred": "SELECT count(*) FROM continents;",
      "gold": "SELECT count(*) FROM CONTINENTS;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
      "pred": "SELECT T1.continent ,  COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent  =  T2.continent GROUP BY T1.continent\n\n### NeededColumns:\ncontinents.cont id, countries.country name\n\n### SQL:\nSELECT COUNT(*) FROM countries JOIN continents ON countries.continent  =  continents.continent WHERE continents.continent  =  'Europe'\n\n### NeededColumns:\ncountries.country name, car names.make\n\n### SQL:\nSELECT COUNT(*) FROM;",
      "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "For each continent, list its id, name, and how many countries it has?",
      "pred": "SELECT cont_id ,  continent ,  count(*) FROM countries GROUP BY cont_id ORDER BY count(*) DESC;",
      "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many countries are listed?",
      "pred": "SELECT count(*) FROM countries;",
      "gold": "SELECT count(*) FROM COUNTRIES;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many countries exist?",
      "pred": "SELECT count(*) FROM countries;",
      "gold": "SELECT count(*) FROM COUNTRIES;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many models does each car maker produce? List maker full name, id and the number.",
      "pred": "SELECT T1.full_name ,  T1.id ,  COUNT(T2.model_id) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id ORDER BY COUNT(T2.model_id) DESC;",
      "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the full name of each car maker, along with its id and how many models it produces?",
      "pred": "SELECT T1.id ,  T1.maker ,  T1.full_name ,  COUNT(T2.model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id ORDER BY COUNT(T2.model) DESC LIMIT 5\n\n### NeededTables:\ncar makers, model list\n\n### SQL:\nSELECT T1.id ,  T1.maker ,  T1.full_name ,  COUNT(T2.model) FROM car_makers AS T1;",
      "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which model of the car has the minimum horsepower?",
      "pred": "SELECT model FROM car_names WHERE make  =  (SELECT make FROM car_names GROUP BY make ORDER BY min(horsepower) LIMIT 1) LIMIT 1;",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the model of the car with the smallest amount of horsepower?",
      "pred": "SELECT model FROM car_names WHERE make  =  (SELECT make FROM car_names WHERE horsepower  =   (SELECT min(horsepower) FROM cars_data))\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT make FROM car_names WHERE model  =  'Cougar'\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT horsepower FROM cars_data WHERE year  =  1987 AND make  =  'Pontiac'\n\n### NeededColumns:\ncars data.make\n\n### SQL:;",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the model of the car whose weight is below the average weight.",
      "pred": "SELECT make FROM car_names WHERE model IN (SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)) INTERSECT SELECT make FROM car_names WHERE model IN (SELECT model FROM cars_data WHERE horsepower  <  (SELECT avg(horsepower) FROM cars_data));",
      "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the model for the car with a weight smaller than the average?",
      "pred": "SELECT model FROM carNames WHERE make  =  (SELECT make FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)) LIMIT 1;",
      "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name of the makers that produced some cars in the year of 1970?",
      "pred": "SELECT maker FROM car_names AS T1 JOIN car_names AS T2 ON T1.make_id  =  T2.make_id WHERE T1.year  =  1970 INTERSECT SELECT maker FROM car_names AS T1 JOIN car_names AS T2 ON T1.make_id  =  T2.make_id WHERE T1.year  =  1980\n\n### NeededColumns:\ncar names.make_id, car names.make\n\n### SQL:\nSELECT make FROM car_names WHERE year  =  1970;",
      "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name of the different car makers who produced a car in 1970?",
      "pred": "SELECT DISTINCT full_name FROM car_names AS T1 JOIN car_makers AS T2 ON T1.make_id  =  T2.id JOIN cars_data AS T3 ON T1.id  =  T3.id WHERE T3.year  =  1970;",
      "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the make and production time of the cars that were produced in the earliest year?",
      "pred": "SELECT T1.makeid ,  T1.model ,  T2.fullname ,  T1.year FROM car_names AS T1 JOIN car_makers AS T2 ON T1.makeid = T2.id JOIN cars_data AS T3 ON T1.modelid = T3.id ORDER BY T3.year LIMIT 10;",
      "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the maker of the carr produced in the earliest year and what year was it?",
      "pred": "SELECT T1.makeid ,  T2.make ,  T1.model ,  T2.fullname ,  T1.year FROM carNames AS T1 JOIN carmakers AS T2 ON T1.makeid = T2.id JOIN carsdata AS T3 ON T1.model = T3.model ORDER BY T3.year LIMIT 1;",
      "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which distinct car models are the produced after 1980?",
      "pred": "SELECT DISTINCT model FROM car_names WHERE year  >  1980;",
      "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the different models for the cards produced after 1980?",
      "pred": "SELECT DISTINCT model FROM car_names WHERE year  >  1980;",
      "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many car makers are there in each continents? List the continent name and the count.",
      "pred": "SELECT T1.continent ,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.cont_id  =  T2.continent JOIN car_makers AS T3 ON T2.country_id  =  T3.country GROUP BY T1.cont_id ORDER BY count(*) DESC;",
      "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the name of each continent and how many car makers are there in each one?",
      "pred": "SELECT T1.continent ,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.cont_id  =  T2.cont_id JOIN car_makers AS T3 ON T2.country_id  =  T3.country GROUP BY T1.cont_id ORDER BY count(*) DESC;",
      "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which of the countries has the most car makers? List the country name.",
      "pred": "SELECT country_name FROM countries AS T1 JOIN country_makers AS T2 ON T1.country_id  =  T2.country GROUP BY country_name ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the name of the country with the most car makers?",
      "pred": "SELECT country_name FROM countries GROUP BY country_name ORDER BY count DESC LIMIT 1;",
      "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
      "pred": "SELECT T1.full_name ,  count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id ORDER BY count(*) DESC;",
      "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
      "pred": "SELECT T1.id ,  T1.maker ,  T1.full_name ,  count(T2.model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id ,  T1.maker ,  T1.full_name\n\n### NeededColumns:\ncar makers.id, car makers.maker, car makers.full name, model list.model\n\n### SQL:\nSELECT T1.id ,  T1.maker ,  T1.full_name ,;",
      "gold": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
      "pred": "SELECT accelerate FROM cars_data WHERE make  =  \"amc hornet sportabout\" AND model  =  \"hornet\" LIMIT 1;",
      "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
      "pred": "SELECT accelerate FROM cars_data WHERE make  =  \"AMC Hornet Sportabout (SW)\"\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT make FROM car_names WHERE model  =  \"Hornet Sportabout (SW)\"\n\n### NeededColumns:\ncar names.model\n\n### SQL:\nSELECT model FROM car_names WHERE make  =  \"AMC\"\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT make FROM car_names WHERE model  =  \"Hornet Sportabout (SW)\";",
      "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many car makers are there in france?",
      "pred": "SELECT count(*) FROM car_makers WHERE full_name = \"France\"\n\n### NeededColumns:\ncar makers: full name\n\n### SQL:\nSELECT count(*) FROM car_makers WHERE full_name = \"France\"\n\n### NeededColumns:\ncar makers: full name, country\n\n### SQL:\nSELECT count(*) FROM car_makers WHERE full_name = \"France\"\n\n### NeededColumns:\ncar makers: full name, country\n\n### SQL:\nSELECT count(*) FROM car_makers WHERE full_name = ;",
      "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the number of makers of care in France?",
      "pred": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.continent WHERE T2.continent  =  'France' AND T1.full_name  =  'Ford Motor Company'\n\n### NeededColumns:\ncar makers.id, car makers.maker, car makers.full name, car makers.country\n\n### SQL:\nSELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.continent WHERE T2.continent  =  ;",
      "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many car models are produced in the usa?",
      "pred": "SELECT count(DISTINCT make) FROM car_names AS T1 JOIN countries AS T2 ON T1.make_id = T2.country_id WHERE country_name = \"USA\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(DISTINCT make) FROM car_names AS T1 JOIN countries AS T2 ON T1.make_id = T2.country_id WHERE country_name = \"USA\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(DISTINCT make) FROM car_;",
      "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the count of the car models produced in the United States?",
      "pred": "SELECT count(*) FROM model_list AS T1 JOIN car_names AS T2 ON T1.id = T2.make_id WHERE T2.make = \"United States\";",
      "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
      "pred": "SELECT avg(MPG) FROM cars_data WHERE cylinders = 4;",
      "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
      "pred": "SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4;",
      "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
      "pred": "SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974;",
      "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
      "pred": "SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974;",
      "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are all the makers and models?",
      "pred": "SELECT maker, model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.id;",
      "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the makers and models?",
      "pred": "SELECT maker, model FROM model_list;",
      "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the countries having at least one car maker? List name and id.",
      "pred": "SELECT country_name ,  country_id FROM countries AS T1 JOIN car_makers AS T2 ON T1.country_id  =  T2.country_id GROUP BY country_id HAVING count(*)  >  0;",
      "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names and ids of all countries with at least one car maker?",
      "pred": "SELECT country_id ,  country_name FROM countries INNER JOIN car_makers ON countries.country_id = car_makers.country_id GROUP BY country_id HAVING count(*)  >=  1;",
      "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the number of the cars with horsepower more than 150?",
      "pred": "SELECT count(*) FROM cars_data WHERE horsepower  >  150;",
      "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the number of cars with a horsepower greater than 150?",
      "pred": "SELECT count(*) FROM cars_data WHERE horsepower  >  150;",
      "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average weight of cars each year?",
      "pred": "SELECT avg(weight) ,  year FROM cars_data GROUP BY year;",
      "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average weight and year for each year?",
      "pred": "SELECT year ,  avg(weight) FROM cars_data GROUP BY year;",
      "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which countries in europe have at least 3 car manufacturers?",
      "pred": "SELECT country FROM countries WHERE continent  =  'Europe' INTERSECT SELECT country FROM car_makers GROUP BY country HAVING count(*)  >=  3;",
      "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of all European countries with at least 3 manufacturers?",
      "pred": "SELECT T1.country_name FROM countries AS T1 JOIN car_makers AS T2 ON T1.continent  =  T2.continent JOIN model_list AS T3 ON T2.id  =  T3.maker GROUP BY T1.country_name HAVING count(*)  >=  3 AND T1.continent  =  'Europe'\n\n### NeededTables:\ncar makers, countries, model list\n\n### SQL:\nSELECT DISTINCT T1.country_name FROM countries AS T1 JOIN car_makers AS T2 ON T1.;",
      "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
      "pred": "SELECT max(horsepower) FROM cars_data WHERE cyl  =  \"3\";",
      "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
      "pred": "SELECT max(horsepower) FROM cars_data WHERE cylinders  =  3;",
      "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
      "pred": "SELECT modelid FROM cars_data ORDER BY MPG DESC LIMIT 1;",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the car model with the highest mpg ?",
      "pred": "SELECT model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id ORDER BY T2.mpg DESC LIMIT 1;",
      "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average horsepower of the cars before 1980?",
      "pred": "SELECT avg(horsepower) FROM cars_data WHERE year  <  1980;",
      "gold": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average horsepower for all cars produced before 1980 ?",
      "pred": "SELECT avg(horsepower) FROM cars_data WHERE year  <  1980;",
      "gold": "select avg(horsepower) from cars_data where year  <  1980;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the average edispl of the cars of model volvo?",
      "pred": "SELECT avg(edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.make_id WHERE T2.make = \"Volvo\";",
      "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average edispl for all volvos?",
      "pred": "SELECT avg(edispl) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id WHERE make  =  \"Volvo\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT avg(edispl) FROM cars_data WHERE id IN (SELECT id FROM car_names WHERE make  =  \"Volvo\")\n\n### NeededColumns:\n\n\n### SQL:\nSELECT avg(edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =;",
      "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the maximum accelerate for different number of cylinders?",
      "pred": "SELECT cylinders, max(accelerate) FROM cars_data GROUP BY cylinders;",
      "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the maximum accelerate for all the different cylinders?",
      "pred": "SELECT max(accelerate) FROM cars_data GROUP BY cylinders;",
      "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which model has the most version(make) of cars?",
      "pred": "SELECT make FROM car_names GROUP BY make ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What model has the most different versions?",
      "pred": "SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many cars have more than 4 cylinders?",
      "pred": "SELECT count(*) FROM cars_data WHERE cylinders  >  4;",
      "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the number of cars with more than 4 cylinders?",
      "pred": "SELECT count(*) FROM cars_data WHERE cylinders  >  4;",
      "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "how many cars were produced in 1980?",
      "pred": "SELECT count(*) FROM cars_data WHERE year  =  1980;",
      "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "In 1980, how many cars were made?",
      "pred": "SELECT count(*) FROM cars_data WHERE year  =  1980;",
      "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many car models were produced by the maker with full name American Motor Company?",
      "pred": "SELECT count(*) FROM model_list AS T1 JOIN car_names AS T2 ON T1.id = T2.make_id WHERE T1.maker = 'American Motor Company' AND T2.make = 'American Motor Company';",
      "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the number of car models created by the car maker American Motor Company?",
      "pred": "SELECT count(*) FROM car_names WHERE make  =  'American Motor Company'\n\n### NeededColumns:\ncar names.make id\n\n### SQL:\nSELECT count(*) FROM car_names WHERE make  =  'American Motor Company'\n\n### NeededColumns:\ncar names.make id\n\n### SQL:\nSELECT count(*) FROM car_names WHERE make  =  'American Motor Company'\n\n### NeededColumns:\ncar names.make id\n\n### SQL:\nSELECT count(*) FROM car_names WHERE make  =  'American Motor Company'\n\n###;",
      "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which makers designed more than 3 car models? List full name and the id.",
      "pred": "SELECT T1.full_name ,  T1.id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >  3;",
      "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names and ids of all makers with more than 3 models?",
      "pred": "SELECT T1.id ,  T1.maker FROM car_makers AS T1 JOIN car_models AS T2 ON T1.id  =  T2.make GROUP BY T1.id HAVING count(*)  >  3;",
      "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
      "pred": "SELECT DISTINCT model FROM model_list WHERE maker  =  \"General Motors\" INTERSECT SELECT model FROM car_names WHERE make  =  \"General Motors\" AND weight  >  3500;",
      "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
      "pred": "SELECT DISTINCT model FROM car_names WHERE make  =  \"General Motors\" INTERSECT SELECT model FROM car_names WHERE weight  >  3500;",
      "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
      "pred": "SELECT year FROM cars_data WHERE weight  >=  3000 AND weight  <=  4000;",
      "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
      "pred": "SELECT DISTINCT year FROM cars_data WHERE weight  <  4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE weight  >  3000;",
      "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the horsepower of the car with the largest accelerate?",
      "pred": "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
      "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the horsepower of the car with the greatest accelerate?",
      "pred": "SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;",
      "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
      "pred": "SELECT cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id WHERE model  =  \"volvo\" ORDER BY accelerate LIMIT 1;",
      "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
      "pred": "SELECT cylinders FROM car_names AS T1 JOIN car_data AS T2 ON T1.id  =  T2.id JOIN model_list AS T3 ON T1.make  =  T3.make WHERE maker  =  'Volvo' ORDER BY accelerate LIMIT 1;",
      "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
      "pred": "SELECT count(*) FROM cars_data WHERE accelerate  >  \uff08SELECT max(accelerate) FROM cars_data\uff09;",
      "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
      "pred": "SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1)\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT make FROM car_names WHERE model  =  'Fiesta'\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT make FROM car_names WHERE model  =  'Focus'\n\n### NeededColumns:\ncar names.make\n\n### SQL:\nSELECT make FROM car_names WHERE model  =  'Golf';",
      "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many countries has more than 2 car makers ?",
      "pred": "SELECT count(*) FROM car_makers GROUP BY country_id HAVING count(*)  >  2;",
      "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the number of countries with more than 2 car makers ?",
      "pred": "SELECT count(*) FROM car_makers GROUP BY country_id HAVING count(*)  >  2;",
      "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many cars has over 6 cylinders?",
      "pred": "SELECT count(*) FROM cars_data WHERE cylinders  >  6;",
      "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the number of carsw ith over 6 cylinders?",
      "pred": "SELECT count(*) FROM cars_data WHERE cylinders  >  6;",
      "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
      "pred": "SELECT horsepower FROM cars_data WHERE cylinders  =  4 ORDER BY horsepower DESC LIMIT 1;",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
      "pred": "SELECT model FROM car_names AS cn JOIN cars_data AS cd ON cn.id  =  cd.id WHERE cd.cylinders  =  4 ORDER BY cd.horsepower DESC LIMIT 1;",
      "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
      "pred": "SELECT T1.makeid ,  T2.make FROM carNames AS T1 JOIN cars_data AS T3 ON T1.modelid  =  T3.modelid JOIN carNames AS T2 ON T1.makeid  =  T2.makeid WHERE T3.cylinders  >  3 AND T3.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) ORDER BY T3.Horsepower DESC;",
      "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
      "pred": "SELECT T1.id ,  T1.cylinders ,  T2.make_id ,  T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.make_id WHERE T1.horsepower  >    (SELECT min(horsepower) FROM cars_data) AND T1.cylinders  <  4;",
      "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
      "pred": "SELECT max(horsepower) FROM cars_data WHERE cylinders  =  8 OR year  <  1980;",
      "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
      "pred": "SELECT max(MPG) FROM cars_data WHERE cylinders  =  8 OR year  <  1980;",
      "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
      "pred": "SELECT make FROM car_names WHERE model NOT LIKE '%Ford%' AND weight  <  3500 GROUP BY make ORDER BY make LIMIT 1000;",
      "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
      "pred": "SELECT DISTINCT model FROM car_names WHERE make != \"Ford\" AND weight  <  3500;",
      "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the name of the countries where there is not a single car maker?",
      "pred": "SELECT country_name FROM countries WHERE country_id NOT IN (SELECT country FROM car_makers)\n\n### NeededColumns:\ncountry name\n\n### SQL:\nSELECT country_name FROM countries WHERE country_id NOT IN (SELECT country FROM car_makers)\n\n### NeededColumns:\ncountry_name\n\n### SQL:\nSELECT country_name FROM countries WHERE country_id NOT IN (SELECT country FROM car_makers)\n\n### NeededColumns:\ncountry_name\n\n### SQL:\nSELECT country_name FROM countries WHERE country_id NOT IN (SELECT country FROM car_;",
      "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the countries with no car makers?",
      "pred": "SELECT country_name FROM countries WHERE country_id NOT IN (SELECT country FROM car_makers)\n\n### NeededTables:\ncar makers, countries\n\n### SQL:\nSELECT country_name FROM countries EXCEPT SELECT DISTINCT country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.country_id\n\n### NeededColumns:\ncountry_name\n\n### SQL:\nSELECT DISTINCT country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country  =  T2.country;",
      "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
      "pred": "SELECT maker FROM car_makers GROUP BY maker HAVING count(*)  >=  2 INTERSECT SELECT maker FROM car_makers GROUP BY maker HAVING count(*)  >  3\n\n### NeededColumns:\ncar makers.id, car makers.maker\n\n### SQL:\nSELECT maker FROM car_makers GROUP BY maker HAVING count(*)  >=  2 INTERSECT SELECT maker FROM car_makers GROUP BY maker HAVING count(*)  >  3\n\n### NeededColumns:\ncar makers.id, car makers.maker\n\n### SQL;",
      "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
      "pred": "SELECT T1.id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY T1.id HAVING count(*)  >=  2 INTERSECT SELECT T1.id FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.id  =  T2.id GROUP BY T1.id HAVING count(*)  >  3;",
      "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
      "pred": "SELECT T1.country_id ,  T1.country_name FROM countries AS T1 JOIN car_makers AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id HAVING count(*)  >  3 UNION SELECT T1.country_id ,  T1.country_name FROM countries AS T1 JOIN car_makers AS T2 ON T1.country_id  =  T2.country_id JOIN model_list AS T3 ON T2.id  =  T3.maker WHERE T3.model;",
      "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
      "pred": "SELECT T1.country_id ,  T1.country_name FROM countries AS T1 JOIN car_makers AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id HAVING count(*)  >  3 UNION SELECT T1.country_id ,  T1.country_name FROM countries AS T1 JOIN car_makers AS T2 ON T1.country_id  =  T2.country_id JOIN model_list AS T3 ON T2.id  =  T3.maker WHERE T3.model;",
      "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which country does Airline \"JetBlue Airways\" belong to?",
      "pred": "SELECT country FROM airlines WHERE airline_name  =  \"JetBlue Airways\"\n\n### NeededColumns:\nairlines.airline name, airlines.country\n\n### SQL:\nSELECT country FROM airlines WHERE airline_name  =  \"JetBlue Airways\"\n\n### NeededColumns:\nairlines.airline name, airlines.country\n\n### SQL:\nSELECT country FROM airlines WHERE airline_name  =  \"JetBlue Airways\"\n\n### NeededColumns:\nairlines.airline name, airlines.country;",
      "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What country is Jetblue Airways affiliated with?",
      "pred": "SELECT country FROM airlines WHERE airline_name = \"Jetblue Airways\"\n\n### NeededColumns:\nairlines.country\n\n### SQL:\nSELECT country FROM airlines WHERE airline_name = \"Jetblue Airways\"\n\n### NeededColumns:\nairlines.country\n\n### SQL:\nSELECT country FROM airlines WHERE airline_name = \"Jetblue Airways\"\n\n### NeededColumns:\nairlines.country\n\n### SQL:\nSELECT country FROM airlines WHERE airline_name = \"Jetblue Airways\";",
      "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
      "pred": "SELECT abbreviation FROM airlines WHERE airline_name  =  \"JetBlue Airways\"\n\n### NeededColumns:\nairports.city, airports.airport_code, airports.airport_name, airports.country, airports.country_abbrev\n\n### SQL:\nSELECT city FROM airports WHERE country_abbrev  =  \"US\"\n\n### NeededColumns:\nflights.source_airport, flights.destination_airport\n\n### SQL:\nSELECT source_airport FROM flights WHERE destination_airport  =  ;",
      "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which abbreviation corresponds to Jetblue Airways?",
      "pred": "SELECT T2.country_abbrev FROM airlines AS T1 JOIN airports AS T2 ON T1.airline_name = \"Jetblue Airways\" AND T1.country = T2.country;",
      "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List all airline names and their abbreviations in \"USA\".",
      "pred": "SELECT airline_name ,  country_abbrev FROM airlines WHERE country  =  \"USA\"\n\n### NeededTables:\nairlines\n\n### SQL:\nSELECT airline_name ,  country_abbrev FROM airlines WHERE country  =  \"USA\"\n\n### NeededTables:\nairlines\n\n### SQL:\nSELECT airline_name ,  country_abbrev FROM airlines WHERE country  =  \"USA\"\n\n### NeededTables:\nairlines\n\n### SQL:\nSELECT airline_name ,  country;",
      "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the airline names and abbreviations for airlines in the USA?",
      "pred": "SELECT airline_name ,  abbreviation FROM airlines WHERE country  =  'USA'\n\n### NeededTables:\nairlines\n\n### SQL:\nSELECT airline_name ,  abbreviation FROM airlines WHERE country  =  'USA'\n\n### NeededTables:\nairlines\n\n### SQL:\nSELECT airline_name ,  abbreviation FROM airlines WHERE country  =  'USA'\n\n### NeededTables:\nairlines\n\n### SQL:\nSELECT airline_name ,  abbreviation FROM airlines WHERE country  =  ;",
      "gold": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "List the airport code and name in the city of Anthony.",
      "pred": "SELECT airport_code ,  airport_name FROM airports WHERE city  =  'Anthony'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_code ,  airport_name FROM airports WHERE city  =  'Anthony'\n\n### NeededColumns:\nairport code, airport name\n\n### SQL:\nSELECT airport_code ,  airport_name FROM airports WHERE city  =  'Anthony'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_code ,  airport_name FROM air;",
      "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the airport code and airport name corresonding to the city Anthony.",
      "pred": "SELECT airport_code ,  airport_name FROM airports WHERE city  =  'Anthony'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_code ,  airport_name FROM airports WHERE city  =  'Anthony'\n\n### NeededColumns:\nairports.airport_code, airports.airport_name\n\n### SQL:\nSELECT airport_code ,  airport_name FROM airports WHERE city  =  'Anthony'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport;",
      "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many airlines do we have?",
      "pred": "SELECT count(*) FROM airlines;",
      "gold": "SELECT count(*) FROM AIRLINES",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the total number of airlines?",
      "pred": "SELECT count(*) FROM airlines;",
      "gold": "SELECT count(*) FROM AIRLINES",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many airports do we have?",
      "pred": "SELECT count(*) FROM airports WHERE country  =  \"USA\"\n\n### NeededColumns:\nairports.country\n\n### SQL:\nSELECT count(*) FROM airports\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT city FROM airports ORDER BY city LIMIT 10\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT city FROM airports ORDER BY city DESC LIMIT 10\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT city FROM airports WHERE country;",
      "gold": "SELECT count(*) FROM AIRPORTS",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the number of  airports.",
      "pred": "SELECT count(*) FROM airports WHERE country  =  'USA' OR country  =  'Canada' OR country  =  'Mexico'\n\n### NeededColumns:\nairports.country\n\n### SQL:\nSELECT count(*) FROM airports WHERE country  =  'USA' OR country  =  'Canada' OR country  =  'Mexico'\n\n### NeededColumns:\nairports.country\n\n### SQL:\nSELECT count(*) FROM airports WHERE country  =  'USA' OR country  =  'Canada' OR country  =  ;",
      "gold": "SELECT count(*) FROM AIRPORTS",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights do we have?",
      "pred": "SELECT count(*) FROM flights;",
      "gold": "SELECT count(*) FROM FLIGHTS",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the number of flights.",
      "pred": "SELECT count(*) FROM flights;",
      "gold": "SELECT count(*) FROM FLIGHTS",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which airline has abbreviation 'UAL'?",
      "pred": "SELECT airline_name FROM airlines WHERE abbrev  =  'UAL'\n\n### NeededColumns:\nairlines.airline name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE abbrev  =  'UAL'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT city FROM airports WHERE airport_name  =  'Hartsfield-Jackson Atlanta International Airport'\n\n### NeededColumns:\nflights.source airport\n\n### SQL:\nSELECT source_airport FROM flights WHERE flight_num  =;",
      "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the airline with abbreviation 'UAL'.",
      "pred": "SELECT airline_name FROM airlines WHERE abbrev  =  'UAL';",
      "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many airlines are from USA?",
      "pred": "SELECT count(*) FROM airlines WHERE country  =  \"USA\"\n\n### NeededColumns:\nairlines.country\n\n### SQL:\nSELECT count(*) FROM airlines WHERE country  =  \"USA\"\n\n### NeededColumns:\nairports.country\n\n### SQL:\nSELECT count(*) FROM airports WHERE country  =  \"USA\"\n\n### NeededColumns:\nairports.country\n\n### SQL:\nSELECT count(*) FROM airports WHERE country  =  \"USA\"\n\n### NeededColumns:\nairports.country;",
      "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the number of airlines in the USA.",
      "pred": "SELECT count(*) FROM airlines WHERE country  =  'USA'\n\n### NeededColumns:\nairlines: airline id\nairports: city\nflights: destination airport\n\n### SQL:\nSELECT count(*) FROM airlines WHERE country  =  'USA'\n\n### NeededColumns:\nairports: airport code\nflights: destination airport\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Boston'\n\n### NeededColumns:\nflights: flight number\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination;",
      "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which city and country is the Alton airport at?",
      "pred": "SELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports;",
      "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the city and country for the Alton airport.",
      "pred": "SELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT city, country FROM airports WHERE airportname  =  \"Alton\"\n\n### NeededTables:\nairports;",
      "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the airport name for airport 'AKO'?",
      "pred": "SELECT airport_name FROM airports WHERE airport_code  =  'AKO'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_name FROM airports WHERE airport_code  =  'AKO'\n\n### NeededColumns:\nairports.airport_name\n\n### SQL:\nSELECT airport_name FROM airports WHERE airport_code  =  'AKO'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_name FROM airports WHERE airport_code  =  'AKO'\n\n### Needed;",
      "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the name of the airport with code 'AKO'.",
      "pred": "SELECT airport_name FROM airports WHERE airport_code  =  'AKO';",
      "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are airport names at City 'Aberdeen'?",
      "pred": "SELECT airport_name FROM airports WHERE city  =  'Aberdeen'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_name FROM airports WHERE city  =  'Aberdeen'\n\n### NeededColumns:\nairports.airport_name\n\n### SQL:\nSELECT airport_name FROM airports WHERE city  =  'Aberdeen'\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_name FROM airports WHERE city  =  'Aberdeen'\n\n### Needed;",
      "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of airports in Aberdeen?",
      "pred": "SELECT airport_name FROM airports WHERE city  =  \"Aberdeen\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_name FROM airports WHERE city  =  \"Aberdeen\"\n\n### NeededColumns:\nairports.airport_name\n\n### SQL:\nSELECT airport_name FROM airports WHERE city  =  \"Aberdeen\"\n\n### NeededTables:\nairports\n\n### SQL:\nSELECT airport_name FROM airports WHERE city  =  \"Aberdeen\"\n\n### Needed;",
      "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights depart from 'APG'?",
      "pred": "SELECT count(*) FROM flights WHERE source_airport  =  'APG'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Boston'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Chicago'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Denver'\n\n### NeededColumns:\nairports;",
      "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Count the number of flights departing from 'APG'.",
      "pred": "SELECT count(*) FROM flights WHERE source_airport  =  'APG'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Boston'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Chicago'\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'Denver'\n\n### NeededColumns:\nairports;",
      "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights have destination ATO?",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  \"ATO\"\n\n### NeededTables:\nairports ,  flights\n\n### SQL:\nSELECT count(*) FROM airports WHERE country  =  \"USA\"\n\n### NeededColumns:\nairports.country\n\n### SQL:\nSELECT count(*) FROM airports WHERE country_abbrev  =  \"US\"\n\n### NeededColumns:\nairports.country_abbrev\n\n### SQL:\nSELECT count(*) FROM airports WHERE country_abbrev  =  \"UK\";",
      "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Count the number of flights into ATO.",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  \"ATO\"\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  \"Austin\"\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  \"Los Angeles\"\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  \"Denver\"\n\n### NeededColumns:\nairports;",
      "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights depart from City Aberdeen?",
      "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.source_apid  =  T2.apid WHERE T2.city  =  'Aberdeen'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.source_apid  =  T2.apid WHERE T2.city  =  'Aberdeen'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights AS T1 JOIN airports AS T;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the number of flights departing from Aberdeen.",
      "pred": "SELECT count(*) FROM flights WHERE source_airport  =  \"ABZ\"\n\n### NeededColumns:\nflights.source_airport\n\n### SQL:\nSELECT count(*) FROM flights WHERE source_airport  =  \"ABZ\"\n\n### NeededColumns:\nflights.source_airport\n\n### SQL:\nSELECT count(*) FROM flights WHERE source_airport  =  \"ABZ\"\n\n### NeededColumns:\nflights.source_airport\n\n### SQL:\nSELECT count(*) FROM flights WHERE source_airport  =  ;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights arriving in Aberdeen city?",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  \"ABD\"\n\n### NeededTables:\nairports, flights\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  \"Aberdeen\"\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport  =  (SELECT city FROM airports WHERE city  =  \"Aberdeen\")\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT count(*) FROM flights;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the number of flights arriving in Aberdeen.",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  \"ABR\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport  =  \"ABR\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport  =  \"ABR\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
      "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.source_airport  =  T2.city WHERE T2.city  =  'Aberdeen' INTERSECT SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destination_airport  =  T2.city WHERE T2.city  =  'Ashley'\n\n### NeededColumns:\nflights.source_airport, flights.destination_airport\n\n### SQL:\nSELECT count(*) FROM flights AS T1 JOIN air;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights fly from Aberdeen to Ashley?",
      "pred": "SELECT count(*) FROM flights WHERE source_airport  =  (SELECT destination_airport FROM flights WHERE destination_airport  =  \"Aberdeen\" AND source_airport  =  \"Ashley\") AND source_airport  =  \"Ashley\";",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many flights does airline 'JetBlue Airways' have?",
      "pred": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline  =  T2.alid WHERE T2.alname  =  'JetBlue Airways'\n\n### NeededColumns:\nairlines.alname\n\n### SQL:\nSELECT count(*) FROM airlines WHERE alname  =  'JetBlue Airways'\n\n### NeededColumns:\nairlines.alname\n\n### SQL:\nSELECT count(*) FROM airports WHERE city  =  'New York'\n\n### NeededColumns:\nairports.city;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the number of Jetblue Airways flights.",
      "pred": "SELECT count(*) FROM flights WHERE airline = (SELECT airline_id FROM airlines WHERE airline_name = \"JetBlue Airways\")\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE airline = (SELECT airline_id FROM airlines WHERE airline_name = \"JetBlue Airways\")\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE airline = (SELECT airline_id FROM airlines WHERE airline_name = \"JetBlue Airways\")\n\n### Need;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
      "pred": "SELECT count(*) FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  'United Airlines') AND destination_airport  =  (SELECT airport_code FROM airports WHERE airport_name  =  'Asyut')\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  'United Airlines')\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_air;",
      "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Count the number of United Airlines flights arriving in ASY Airport.",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  (SELECT destination_airport FROM airports WHERE airport_name  =  \"ASY Airport\") AND airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  \"United Airlines\")\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport  =  (SELECT destination_airport FROM airports WHERE airport_name  =  \"ASY Airport\") AND airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  ;",
      "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
      "pred": "SELECT count(*) FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  'United Airlines') AND source_ap  =  'AHD'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  'United Airlines') AND source_ap  =  'AHD'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE airline  =  (SELECT airline_;",
      "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the number of United Airlines flights leaving from AHD Airport.",
      "pred": "SELECT count(*) FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  'United Airlines') AND source_ap  =  (SELECT apt_code FROM airports WHERE apt_name  =  'AHD Airport')\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  'United Airlines')\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE source_ap;",
      "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many United Airlines flights go to City 'Aberdeen'?",
      "pred": "SELECT count(*) FROM flights WHERE airline = (SELECT airline_id FROM airlines WHERE airline_name = 'United') AND destination_ap = (SELECT destination_ap FROM flights WHERE source_ap = (SELECT airport_code FROM airports WHERE city = 'Aberdeen'));",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
      "pred": "SELECT count(*) FROM flights WHERE airline IN (SELECT airline FROM flights WHERE destination_airport  =  \"ABD\" ) AND airline  =  (SELECT airline FROM airlines WHERE airline_name  =  \"United\")\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport  =  \"ABD\" AND airline  =  (SELECT airline FROM airlines WHERE airline_name  =  \"United\")\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM flights WHERE destination_airport;",
      "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which city has most number of arriving flights?",
      "pred": "SELECT destination_airport FROM flights GROUP BY destination_airport ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which city has the most frequent destination airport?",
      "pred": "SELECT destination_airport FROM flights GROUP BY destination_airport ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which city has most number of departing flights?",
      "pred": "SELECT destination_airport FROM flights GROUP BY destination_airport ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which city is the most frequent source airport?",
      "pred": "SELECT source_ap\nFROM flights\nGROUP BY source_ap\nORDER BY count(*) DESC\nLIMIT 1;",
      "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the code of airport that has the highest number of flights?",
      "pred": "SELECT destination_ap FROM flights GROUP BY destination_ap ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the airport code of the airport with the most flights?",
      "pred": "SELECT destination_ap FROM flights GROUP BY destination_ap ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the code of airport that has fewest number of flights?",
      "pred": "SELECT d_apid FROM flights GROUP BY d_apid ORDER BY count(*) ASC LIMIT 1;",
      "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Give the code of the airport with the least flights.",
      "pred": "SELECT airport_code FROM flights GROUP BY destination_apt ORDER BY count(*) ASC LIMIT 1;",
      "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which airline has most number of flights?",
      "pred": "SELECT airline_name FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What airline serves the most flights?",
      "pred": "SELECT airline_name FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
      "pred": "SELECT T1.abbreviation ,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.al GROUP BY T1.alid ORDER BY count(*) LIMIT 1;",
      "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
      "pred": "SELECT T1.abbreviation ,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.al GROUP BY T1.alid ORDER BY count(*) LIMIT 1;",
      "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are airlines that have some flight departing from airport 'AHD'?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.aid  =  T2.fl_from WHERE T2.fl_from  =  'AHD'\n\n### NeededColumns:\nairlines.airline_name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE aid IN (SELECT aid FROM flights WHERE fl_from  =  'AHD')\n\n### NeededColumns:\nairlines.airline_name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE aid IN (SELECT fl_;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which airlines have a flight with source airport AHD?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.src WHERE T2.src  =  \"AHD\"\n\n### NeededColumns:\nairlines.airline name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE airid IN (SELECT airline FROM flights WHERE src  =  \"AHD\")\n\n### NeededColumns:\nairlines.airline name\n\n### SQL:\nSELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are airlines that have flights arriving at airport 'AHD'?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.dst_ap WHERE T2.dst_ap  =  'AHD' GROUP BY T1.airline_name\n\n### NeededColumns:\nairlines.airline_name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE airid IN (SELECT dst_ap FROM flights WHERE dst_ap  =  'AHD')\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which airlines have a flight with destination airport AHD?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.flid WHERE T2.dst_ap  =  'AHD' GROUP BY T1.airline_name\n\n### NeededColumns:\nairlines.airline name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE airid IN (SELECT airline FROM flights WHERE dst_ap  =  'AHD')\n\n### NeededColumns:\nairports.city\n\n### SQL:\nSELECT city FROM airports WHERE;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.Src WHERE T2.dst  =  'APG' INTERSECT SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.Src WHERE T2.dst  =  'CVO';",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which airlines have departing flights from both APG and CVO airports?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.flid WHERE T2.source_ap  =  'APG' INTERSECT SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.flid WHERE T2.source_ap  =  'CVO'\n\n### NeededTables:\nairlines, flights\n\n### SQL:\nSELECT T1.airline_name FROM airlines AS T1 JOIN;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.src_ap AND T2.dst_ap  =  'APG' EXCEPT SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.src_ap AND T2.dst_ap  =  'CVO' INTERSECT SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which airlines have departures from CVO but not from APG airports?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airline_id  =  T2.airline WHERE T2.source_ap  =  'CVO' EXCEPT SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airline_id  =  T2.airline WHERE T2.source_ap  =  'APG'\n\n### NeededColumns:\nairlines.airline_name\n\n### SQL:\nSELECT airline_name FROM airlines WHERE airline;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find all airlines that have at least 10 flights.",
      "pred": "SELECT count(*) FROM airports WHERE airport_code IN (SELECT source_ap FROM flights WHERE destination_ap  =  'BOS') INTERSECT SELECT count(*) FROM airports WHERE airport_code IN (SELECT destination_ap FROM flights WHERE source_ap  =  'BOS');",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which airlines have at least 10 flights?",
      "pred": "SELECT count(*) FROM airports WHERE airport_code IN (SELECT source_ap FROM flights GROUP BY source_ap HAVING count(*)  >=  10) OR airport_code IN (SELECT dest_ap FROM flights GROUP BY dest_ap HAVING count(*)  >=  10) INTERSECT SELECT count(*) FROM airlines WHERE airline_id IN (SELECT airline FROM flights GROUP BY airline HAVING count(*)  >=  10)\n\n### NeededColumns:\nairlines.airline id\n\n### SQL:\nSELECT count(*);",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find all airlines that have fewer than 200 flights.",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.carrier_id  =  T2.carrier_id GROUP BY T2.carrier_id HAVING count(*)  <  200;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which airlines have less than 200 flights?",
      "pred": "SELECT T1.airline_name FROM airlines AS T1 JOIN flights AS T2 ON T1.airid  =  T2.airline GROUP BY T1.airid HAVING count(*)  <  200;",
      "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are flight numbers of Airline \"United Airlines\"?",
      "pred": "SELECT flight_num FROM airlines AS T1 JOIN flights AS T2 ON T1.airline_id  =  T2.airline WHERE T1.airline_name  =  \"United Airlines\"\n\n### NeededColumns:\nflights.flight number\n\n### SQL:\nSELECT flight_num FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  \"United Airlines\")\n\n### NeededColumns:\nflights.flight number\n\n### SQL:\nSELECT flight_num FROM airlines AS T1 JOIN;",
      "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which flight numbers correspond to United Airlines flights?",
      "pred": "SELECT flight_num FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  \"United\")\n\n### NeededColumns:\nflights.airline\n\n### SQL:\nSELECT flight_num FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  \"United\")\n\n### NeededColumns:\nflights.airline\n\n### SQL:\nSELECT flight_num FROM flights WHERE airline  =  (SELECT airline_id FROM airlines WHERE airline_name  =  \"United\");",
      "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are flight numbers of flights departing from Airport \"APG\"?",
      "pred": "SELECT flight_num FROM flights WHERE source_ap = \"APG\"\n\n### NeededTables:\nairports, flights\n\n### SQL:\nSELECT flight_num FROM flights WHERE source_ap  =  (SELECT airport_code FROM airports WHERE airport_name  =  \"APG Airport\")\n\n### NeededColumns:\nflights.source_ap, airports.airport_code, airports.airport_name\n\n### SQL:\nSELECT flight_num FROM flights JOIN airports ON source_ap  =  airport_code WHERE airport_name  =  ;",
      "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the flight numbers of flights leaving from APG.",
      "pred": "SELECT flight_num FROM flights WHERE source_apg  =  'APG'\n\n### NeededTables:\nairports, airlines, flights\n\n### SQL:\nSELECT flight_num FROM flights WHERE source_apg  =  (SELECT airport_code FROM airports WHERE airport_name  =  'APG')\n\n### NeededColumns:\nflights.source_apg\n\n### SQL:\nSELECT flight_num FROM flights WHERE source_apg  =  'APG'\n\n### NeededColumns:\nflights.source_apg\n\n### SQL:;",
      "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
      "pred": "SELECT destination_airport FROM flights WHERE destination_airport  =  \"APG\"\n\n### NeededColumns:\nflights.destination airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  \"APG\"\n\n### NeededColumns:\nflights.destination airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  \"APG\"\n\n### NeededColumns:\nflights.destination airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =;",
      "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the flight numbers of flights landing at APG.",
      "pred": "SELECT destination_airport FROM flights WHERE destination_airport  =  \"APG\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  \"APG\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  \"APG\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE;",
      "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
      "pred": "SELECT Flight_Number FROM flights WHERE Source_APT  =  (SELECT Airport_Code FROM airports WHERE City  =  \"Aberdeen\") INTERSECT SELECT Flight_Number FROM flights WHERE Destination_APT  =  (SELECT Airport_Code FROM airports WHERE City  =  \"Aberdeen\");",
      "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Give the flight numbers of flights leaving from Aberdeen.",
      "pred": "SELECT flight_num FROM flights WHERE source_ap = \"ABR\" OR source_ap = \"EIE\" OR source_ap = \"LPA\" OR source_ap = \"LAS\" OR source_ap = \"BFS\" OR source_ap = \"TNT\" OR source_ap = \"STL\" OR source_ap = \"BUR\" OR source_ap = \"IND\" OR source_ap = \"CLE\" OR source_ap = \"JAX\" OR source_ap = \"HOU\" OR source_ap = \"DFW\" OR source_ap = ;",
      "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
      "pred": "SELECT destination_airport FROM flights WHERE destination_airport  =  (SELECT airport_code FROM airports WHERE city  =  \"Aberdeen\")\n\n### NeededTables:\nairports, flights\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  (SELECT airport_code FROM airports WHERE city  =  \"Aberdeen\")\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  (SELECT airport_code FROM airports WHERE;",
      "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Give the flight numbers of flights arriving in Aberdeen.",
      "pred": "SELECT destination_airport FROM flights WHERE destination_airport  =  \"ABR\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  \"ABR\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE destination_airport  =  \"ABR\"\n\n### NeededColumns:\nflights.destination_airport\n\n### SQL:\nSELECT destination_airport FROM flights WHERE;",
      "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  \"ABQ\" OR destination_airport  =  \"AUS\" OR destination_airport  =  \"BNA\" OR destination_airport  =  \"BWI\" OR destination_airport  =  \"DCA\" OR destination_airport  =  \"DEN\" OR destination_airport  =  \"DTW\" OR destination_airport  =  \"FLL\" OR destination_airport  =  \"IAD\" OR destination_airport  =  \"JAX\" OR destination_airport  =  \"LGA\" OR;",
      "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many flights land in Aberdeen or Abilene?",
      "pred": "SELECT count(*) FROM flights WHERE destination_airport  =  \"ABQ\" OR destination_airport  =  \"ABE\" OR destination_airport  =  \"BQN\";",
      "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name of airports which do not have any flight in and out.",
      "pred": "SELECT airport_name FROM airports EXCEPT SELECT DISTINCT source_ap FROM flights UNION SELECT DISTINCT dest_ap FROM flights;",
      "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which airports do not have departing or arriving flights?",
      "pred": "SELECT city FROM airports WHERE city NOT IN (SELECT source_ap FROM flights UNION SELECT dest_ap FROM flights)\n\n### NeededTables:\nairports, flights\n\n### SQL:\nSELECT city FROM airports EXCEPT SELECT dest_ap FROM flights WHERE source_ap  =  'EWR'\n\n### NeededColumns:\nairports.city\n\n### NeededTables:\nairports, flights\n\n### SQL:\nSELECT city FROM airports EXCEPT SELECT dest_ap FROM flights WHERE source_ap  =  'EWR' INTERSECT SELECT city FROM;",
      "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many employees are there?",
      "pred": "SELECT count(*) FROM employee;",
      "gold": "SELECT count(*) FROM employee",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of employees",
      "pred": "SELECT count(*) FROM employee;",
      "gold": "SELECT count(*) FROM employee",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Sort employee names by their age in ascending order.",
      "pred": "SELECT name FROM employee ORDER BY age ASC;",
      "gold": "SELECT name FROM employee ORDER BY age",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the names of employees and sort in ascending order of age.",
      "pred": "SELECT name FROM employee ORDER BY age ASC;",
      "gold": "SELECT name FROM employee ORDER BY age",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the number of employees from each city?",
      "pred": "SELECT count(*) ,  city FROM employee GROUP BY city;",
      "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of employees for each city.",
      "pred": "SELECT count(*) ,  city FROM employee GROUP BY city;",
      "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which cities do more than one employee under age 30 come from?",
      "pred": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;",
      "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the cities that have more than one employee under age 30.",
      "pred": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;",
      "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the number of shops in each location.",
      "pred": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\n\n### NeededColumns:\nshop.location\n\n### SQL:\nSELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\n\n### NeededColumns:\nshop.location\n\n### SQL:\nSELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\n\n### NeededColumns:\nshop.location\n\n### SQL:\nSELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\n\n### NeededColumns:\nshop.location;",
      "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many shops are there in each location?",
      "pred": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;",
      "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the manager name and district of the shop whose number of products is the largest.",
      "pred": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;",
      "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the manager name and district of the shop that sells the largest number of products?",
      "pred": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;",
      "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "find the minimum and maximum number of products of all stores.",
      "pred": "SELECT min(Number_Products) ,  max(Number_Products) FROM shop;",
      "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the minimum and maximum number of products across all the shops?",
      "pred": "SELECT min(Number_Products) ,  max(Number_Products) FROM shop;",
      "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the name, location and district of all shops in descending order of number of products.",
      "pred": "SELECT name, location, district, number_products FROM shop ORDER BY number_products DESC;",
      "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
      "pred": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;",
      "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the names of stores whose number products is more than the average number of products.",
      "pred": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE number_products  >  (SELECT avg(numbernumber_products) FROM shop)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE number_products;",
      "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which shops' number products is above the average? Give me the shop names.",
      "pred": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE number_products  >  (;",
      "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "find the name of employee who was awarded the most times in the evaluation.",
      "pred": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T2.employee_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which employee received the most awards in evaluations? Give me the employee name.",
      "pred": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T2.employee_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the name of the employee who got the highest one time bonus.",
      "pred": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T2.bonus DESC LIMIT 1;",
      "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which employee received the biggest bonus? Give me the employee name.",
      "pred": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id ORDER BY T2.bonus DESC LIMIT 1;",
      "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the names of employees who never won any award in the evaluation.",
      "pred": "SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id;",
      "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the employees who never received any evaluation?",
      "pred": "SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id;",
      "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the name of the shop that is hiring the largest number of employees?",
      "pred": "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1;",
      "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which shop has the most employees? Give me the shop name.",
      "pred": "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1;",
      "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name of the shops that do not hire any employee.",
      "pred": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\n\n### NeededColumns:\nemployee.employee_id ,  employee.name\n\n### SQL:\nSELECT T2.name FROM hiring AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id WHERE T1.is_full_time  =  'No' GROUP BY T;",
      "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which shops run with no employees? Find the shop names",
      "pred": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\n\n### Needed;",
      "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of employees hired in each shop; show the shop name as well.",
      "pred": "SELECT T1.name ,  count(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id;",
      "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "For each shop, return the number of employees working there and the name of the shop.",
      "pred": "SELECT T1.name ,  count(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT name FROM shop WHERE district  =  'Downtown'\n\n### NeededColumns:\nshop.name\n\n### SQL:\nSELECT count(*) FROM shop WHERE district  =  'Downtown'\n\n### NeededColumns:\nshop.district\n\n### SQL:\nSELECT count(*) FROM;",
      "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is total bonus given in all evaluations?",
      "pred": "SELECT sum(bonus) FROM evaluation;",
      "gold": "SELECT sum(bonus) FROM evaluation",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the total amount of bonus given in all the evaluations.",
      "pred": "SELECT sum(Bonus) FROM Evaluation;",
      "gold": "SELECT sum(bonus) FROM evaluation",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Give me all the information about hiring.",
      "pred": "SELECT * FROM hiring;",
      "gold": "SELECT * FROM hiring",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is all the information about hiring?",
      "pred": "SELECT * FROM hiring;",
      "gold": "SELECT * FROM hiring",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
      "pred": "SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000;",
      "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
      "pred": "SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000;",
      "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many different store locations are there?",
      "pred": "SELECT count(DISTINCT(location)) FROM shop;",
      "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of distinct store locations.",
      "pred": "SELECT count(DISTINCT location) FROM shop;",
      "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many documents do we have?",
      "pred": "SELECT count(*) FROM Documents;",
      "gold": "SELECT count(*) FROM Documents",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of documents.",
      "pred": "SELECT count(*) FROM Documents;",
      "gold": "SELECT count(*) FROM Documents",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List document IDs, document names, and document descriptions for all documents.",
      "pred": "SELECT document_id ,  document_name ,  document_description FROM Documents;",
      "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the ids, names, and descriptions for all documents?",
      "pred": "SELECT document_id ,  document_name ,  document_description FROM Documents;",
      "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the document name and template id for document with description with the letter 'w' in it?",
      "pred": "SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';",
      "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the names and template ids for documents that contain the letter w in their description.",
      "pred": "SELECT document_name FROM documents WHERE document_description LIKE '%w%'\n\n### NeededColumns:\ndocument_id\n\n### SQL:\nSELECT document_id FROM documents WHERE document_description LIKE '%w%'\n\n### NeededColumns:\ndocument_name, document_description\n\n### SQL:\nSELECT document_name, document_description FROM documents WHERE document_description LIKE '%w%'\n\n### NeededColumns:\ndocument_id, document_name\n\n### SQL:\nSELECT document_id, document_name FROM documents WHERE document_description LIKE ;",
      "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
      "pred": "SELECT document_id ,  template_id ,  document_description FROM documents WHERE document_name  =  \"Robbin CV\"\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id ,  template_id ,  document_name FROM documents WHERE document_description  =  \"Robbin CV\"\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id ,  template_id ,  document_name FROM documents WHERE document_description  =  \"Robbin CV\"\n\n### NeededColumns:;",
      "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
      "pred": "SELECT document_id ,  template_id ,  document_description FROM Documents WHERE document_name  =  \"Robbin CV\"\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id ,  template_id ,  document_description FROM Documents WHERE document_name  =  \"Robbin CV\"\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id ,  template_id ,  document_description FROM Documents WHERE document_name  =  \"Robbin CV\"\n\n### Need;",
      "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many different templates do all document use?",
      "pred": "SELECT count(DISTINCT version_number) FROM templates AS T1 JOIN documents AS T2 ON T1.template_id = T2.template_id;",
      "gold": "SELECT count(DISTINCT template_id) FROM Documents",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Count the number of different templates used for documents.",
      "pred": "SELECT count(DISTINCT template_type_code) FROM templates;",
      "gold": "SELECT count(DISTINCT template_id) FROM Documents",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many documents are using the template with type code 'PPT'?",
      "pred": "SELECT count(*) FROM templates WHERE template_type_code  =  'PPT'\n\n### NeededColumns:\ndocuments.document name, count\n\n### SQL:\nSELECT document_name ,  count(*) FROM documents GROUP BY document_name\n\n### NeededColumns:\ndocuments.document_name, documents.document_id, paragraphs.other_details\n\n### SQL:\nSELECT T1.document_name ,  T1.document_id ,  T2.other_details FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_;",
      "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Count the number of documents that use the PPT template type.",
      "pred": "SELECT count(*) FROM templates WHERE template_type_code  =  \"PPT\"\n\n### NeededColumns:\nreference template types: template type code\ndocuments: document name\n\n### SQL:\nSELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code  =  \"PPT\")\n\n### NeededColumns:\ndocuments: document name\nparagraphs: other details\n\n### SQL:\nSELECT other_details FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name  =  ;",
      "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show all template ids and number of documents using each template.",
      "pred": "SELECT T1.template_id ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id\n\n### NeededColumns:\ndocuments.template id\n\n### SQL:\nSELECT count(*) FROM Documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name  =  'Document 1'\n\n### NeededColumns:\ndocuments.document_id\n\n###;",
      "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are all different template ids used for documents, and how many times were each of them used?",
      "pred": "SELECT template_id ,  count(*) FROM documents GROUP BY template_id ORDER BY count(*) DESC;",
      "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the id and type code for the template used by the most documents?",
      "pred": "SELECT template_id ,  template_type_code FROM templates WHERE document_id  =  ( SELECT document_id FROM documents ORDER BY documents.documents ORDER BY count(*) DESC LIMIT 1)\n\n### NeededColumns:\ntemplates.template_id\n\n### SQL:\nSELECT template_id ,  template_type_code FROM templates WHERE document_id  =  ( SELECT document_id FROM documents ORDER BY documents.documents ORDER BY count(*) DESC LIMIT 1)\n\n### NeededColumns:\ntemplates.template_id\n\n### SQL:\nSELECT template;",
      "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the id and type code of the template that is used for the greatest number of documents.",
      "pred": "SELECT template_id ,  template_type_code FROM templates GROUP BY template_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show ids for all templates that are used by more than one document.",
      "pred": "SELECT template_id FROM Templates GROUP BY template_id HAVING count(*)  >  1;",
      "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the template ids of any templates used in more than a single document?",
      "pred": "SELECT template_id FROM Templates GROUP BY template_id HAVING count(*)  >  1;",
      "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show ids for all templates not used by any document.",
      "pred": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents WHERE document_name != \"test\"\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id FROM Documents WHERE document_name != \"test\"\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id FROM Documents WHERE document_name != \"test\" INTERSECT SELECT document_id FROM Documents WHERE document_name = \"test\"\n\n### NeededColumns:\ndocuments.document;",
      "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids for templates that are not used in any documents?",
      "pred": "SELECT template_id FROM Templates WHERE template_id NOT IN (SELECT template_id FROM Documents)\n\n### NeededColumns:\ndocuments.document_name\n\n### SQL:\nSELECT document_name FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Paragraphs)\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Paragraphs)\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:;",
      "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many templates do we have?",
      "pred": "SELECT count(*) FROM Templates;",
      "gold": "SELECT count(*) FROM Templates",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of templates.",
      "pred": "SELECT count(*) FROM Templates;",
      "gold": "SELECT count(*) FROM Templates",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show template ids, version numbers, and template type codes for all templates.",
      "pred": "SELECT template_id ,  version_number ,  template_type_code FROM templates;",
      "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the ids, version numbers, and type codes for each template?",
      "pred": "SELECT template_id ,  version_number ,  template_type_code FROM templates;",
      "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show all distinct template type codes for all templates.",
      "pred": "SELECT DISTINCT template_type_code FROM Templates;",
      "gold": "SELECT DISTINCT template_type_code FROM Templates",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the different template type codes?",
      "pred": "SELECT DISTINCT template_type_code FROM Ref_template_types;",
      "gold": "SELECT DISTINCT template_type_code FROM Templates",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the ids of templates with template type code PP or PPT?",
      "pred": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'\n\n### NeededColumns:\ndocuments.document id\n\n### SQL:\nSELECT document_id FROM Documents WHERE document_name  =  'Test Document 1'\n\n### NeededColumns:\nparagraphs.paragraph id\n\n### SQL:\nSELECT paragraph_id FROM Paragraphs WHERE other_details  =  'Test'\n\n### NeededColumns:\ndocuments.document id\n\n### SQL:\nSELECT document_id FROM;",
      "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the ids of templates that have the code PP or PPT.",
      "pred": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'\n\n### NeededColumns:\ndocuments.document id\n\n### SQL:\nSELECT document_id FROM Documents WHERE document_name LIKE '%test%'\n\n### NeededColumns:\nparagraphs.paragraph id\n\n### SQL:\nSELECT paragraph_id FROM Paragraphs WHERE other_details LIKE '%test%'\n\n### NeededColumns:\ndocuments.document id\n\n### SQL:\nSELECT document_id FROM Doc;",
      "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many templates have template type code CV?",
      "pred": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'\n\n### NeededTables:\nTemplates\n\n### SQL:\nSELECT count(*) FROM Templates WHERE template_type_code  =  'CV'\n\n### NeededTables:\nTemplates\n\n### SQL:\nSELECT count(*) FROM Templates WHERE template_type_code  =  'CV'\n\n### NeededTables:\nTemplates\n\n### SQL:\nSELECT count(*) FROM Templates WHERE template_type_code  =  'CV'\n\n### Needed;",
      "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Count the number of templates of the type CV.",
      "pred": "SELECT count(*) FROM Templates AS T1 JOIN Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  \"CV\"\n\n### NeededTables:\ntemplates, template types\n\n### SQL:\nSELECT count(*) FROM Templates WHERE template_type_code  =  (SELECT template_type_code FROM Template_Types WHERE template_type_description  =  \"CV\")\n\n### NeededColumns:\ndocument id, document name\n\n### SQL:\nSELECT document;",
      "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the version number and template type code for the template with version number later than 5?",
      "pred": "SELECT version_number FROM templates WHERE version_number  >  5;",
      "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
      "pred": "SELECT version_number FROM templates WHERE version_number  >  5;",
      "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show all template type codes and number of templates for each.",
      "pred": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;",
      "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the different template type codes, and how many templates correspond to each?",
      "pred": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code\n\n### NeededTables:\nTemplates\n\n### SQL:\nSELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code\n\n### NeededTables:\nTemplates\n\n### SQL:\nSELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code\n\n### NeededTables:\nTemplates\n\n### SQL:\nSELECT template_type_code ,  count(*) FROM Templates;",
      "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Which template type code has most number of templates?",
      "pred": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the type code of the template type that the most templates belong to.",
      "pred": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show all template type codes with less than three templates.",
      "pred": "SELECT template_type_code FROM Ref_Template_Types GROUP BY template_type_code HAVING count(*)  <  3;",
      "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the codes of template types that have fewer than 3 templates?",
      "pred": "SELECT template_type_code FROM Ref_Template_Types GROUP BY template_type_code HAVING count(*)  <  3;",
      "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What the smallest version number and its template type code?",
      "pred": "SELECT min(version_number) ,  template_type_code FROM Templates GROUP BY template_type_code ORDER BY min(version_number) ASC LIMIT 1;",
      "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the lowest version number, along with its corresponding template type code.",
      "pred": "SELECT min(version_number) FROM templates;",
      "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the template type code of the template used by document with the name \"Data base\"?",
      "pred": "SELECT T1.template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\" LIMIT 1;",
      "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the template type code of the template that is used by a document named Data base.",
      "pred": "SELECT T1.template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\" LIMIT 1;",
      "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show all document names using templates with template type code BK.",
      "pred": "SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code  =  \"BK\")\n\n### NeededColumns:\ndocuments.document_name\n\n### SQL:\nSELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code  =  \"BK\")\n\n### NeededColumns:\ndocuments.document_name\n\n### SQL:\nSELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code;",
      "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of documents that use templates with the code BK?",
      "pred": "SELECT document_name FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  'BK'\n\n### NeededColumns:\ndocuments.document_name\ntemplates.template_type_code\n\n### SQL:\nSELECT document_name FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code  =  'BK'\n\n### NeededColumns:\ndocument_name;",
      "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show all template type codes and the number of documents using each type.",
      "pred": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code\n\n### NeededTables:\ntemplates, documents\n\n### SQL:\nSELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code\n\n### NeededTables;",
      "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the different template type codes, and how many documents use each type?",
      "pred": "SELECT template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY template_type_code ORDER BY count(*) DESC;",
      "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which template type code is used by most number of documents?",
      "pred": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Return the code of the template type that is most commonly used in documents.",
      "pred": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show all template type codes that are not used by any document.",
      "pred": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Documents WHERE document_name = \"Other\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Documents WHERE document_name != \"Other\"\n\n### NeededColumns:\ndocument_name,  template_type_code\n\n### SQL:\nSELECT DISTINCT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1;",
      "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the codes of template types that are not used for any document?",
      "pred": "SELECT template_type_code FROM Reference_template_types EXCEPT SELECT DISTINCT template_type_code FROM Templates WHERE template_id IN (SELECT template_id FROM Documents);",
      "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show all template type codes and descriptions.",
      "pred": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;",
      "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the type codes and descriptions for all template types?",
      "pred": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;",
      "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the template type descriptions for template type code \"AD\".",
      "pred": "SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code  =  \"AD\";",
      "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the template type description of the template type with the code AD.",
      "pred": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD';",
      "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the template type code for template type description \"Book\".",
      "pred": "SELECT template_type_code FROM reference_template_types WHERE template_type_description  =  \"Book\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_code FROM reference_template_types WHERE template_type_description  =  \"Book\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_code FROM reference WHERE template_type_description  =  \"Book\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_;",
      "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the type code of the template type with the description \"Book\".",
      "pred": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_code FROM Ref WHERE template_type_description  =  \"Book\"\n\n### NeededColumns:\ntemplate_type_code\n\n### SQL:\nSELECT template_type_;",
      "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the distinct template type descriptions for the templates ever used by any document?",
      "pred": "SELECT DISTINCT T1.template_type_description FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id JOIN Paragraphs AS T3 ON T2.document_id  =  T3.document_id;",
      "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Return the different descriptions for templates that have been used in a document.",
      "pred": "SELECT DISTINCT T1.template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1.template_id = T2.template_id;",
      "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the template ids with template type description \"Presentation\".",
      "pred": "SELECT template_id FROM Templates WHERE template_type_code  =  (SELECT template_type_code FROM reference_template_types WHERE template_type_description  =  \"Presentation\")\n\n### NeededColumns:\ntemplates.template_id\n\n### SQL:\nSELECT template_id FROM Templates WHERE template_type_code  =  (SELECT template_type_code FROM reference_template_types WHERE template_type_description  =  \"Presentation\")\n\n### NeededColumns:\ndocuments.document_id\n\n### SQL:\nSELECT document_id FROM Documents WHERE;",
      "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Return the ids corresponding to templates with the description 'Presentation'.",
      "pred": "SELECT template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  'Presentation'\n\n### NeededColumns:\ntemplate id\n\n### SQL:\nSELECT template_id FROM Templates WHERE template_type_code  =  'PPT'\n\n### NeededColumns:\ndocument id\n\n### SQL:\nSELECT document_id FROM Documents WHERE document_name  =  'Course Outline'\n\n### Needed;",
      "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many paragraphs in total?",
      "pred": "SELECT count(*) FROM paragraphs;",
      "gold": "SELECT count(*) FROM Paragraphs",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of paragraphs.",
      "pred": "SELECT count(*) FROM paragraphs;",
      "gold": "SELECT count(*) FROM Paragraphs",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many paragraphs for the document with name 'Summer Show'?",
      "pred": "SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Summer Show'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM documents WHERE document_name  =  'Summer Show'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code;",
      "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Count the number of paragraphs in the document named 'Summer Show'.",
      "pred": "SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Summer Show'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM documents WHERE document_name  =  'Summer Show'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T2.template_type_code;",
      "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show paragraph details for paragraph with text 'Korea ' .",
      "pred": "SELECT paragraph_details FROM Paragraphs WHERE paragraph_text = 'Korea ';",
      "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
      "pred": "SELECT paragraph_text FROM paragraphs WHERE paragraph_text LIKE '%Korea%';",
      "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
      "pred": "SELECT T1.paragraph_id ,  T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Welcome to NY'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT T1.paragraph_id ,  T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Welcome to NY';",
      "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
      "pred": "SELECT T2.paragraph_id ,  T2.paragraph_text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name  =  'Welcome to NY'\n\n### NeededTables:\ndocuments, paragraphs\n\n### SQL:\nSELECT T2.paragraph_id ,  T2.paragraph_text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name;",
      "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show all paragraph texts for the document \"Customer reviews\".",
      "pred": "SELECT paragraph_text FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  \"Customer reviews\")\n\n### NeededTables:\ndocuments, paragraphs\n\n### SQL:\nSELECT T2.paragraph_text FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name  =  \"Customer reviews\"\n\n### NeededColumns:\ndocuments.document_name, documents.document_description, paragraphs.paragraph_text\n\n### SQL:;",
      "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
      "pred": "SELECT paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE document_name  =  'Customer reviews'\n\n### NeededTables:\ndocuments, paragraphs\n\n### SQL:\nSELECT T2.paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'\n\n### NeededColumns:\ndocument_name, paragraph_text\n\n### SQL:\nSELECT;",
      "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
      "pred": "SELECT document_id ,  count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id;",
      "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
      "pred": "SELECT document_id ,  count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id;",
      "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show all document ids, names and the number of paragraphs in each document.",
      "pred": "SELECT T1.document_id ,  T1.document_name ,  count(*) FROM Documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\n\n### NeededColumns:\ndocuments.document_id, documents.document_name, paragraphs.document_id\n\n### SQL:\nSELECT T1.document_id ,  T1.document_name ,  count(*) FROM Documents AS T1 JOIN paragraphs AS T2 ON T1.document_id;",
      "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
      "pred": "SELECT T1.document_id ,  T1.document_name ,  T2.count FROM Documents AS T1 JOIN (SELECT document_id ,  count(*) AS count FROM Paragraphs GROUP BY document_id) AS T2 ON T1.document_id  =  T2.document_id;",
      "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List all document ids with at least two paragraphs.",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;",
      "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the ids of documents that have 2 or more paragraphs?",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >=  2;",
      "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the document id and name with greatest number of paragraphs?",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Return the id and name of the document with the most paragraphs.",
      "pred": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\n\n### NeededColumns:\ndocuments.document_name, documents.document_id\n\n### SQL:\nSELECT document_name FROM documents WHERE document_id  =  (SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) DESC LIMIT 1)\n\n### Needed;",
      "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the document id with least number of paragraphs?",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;",
      "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Return the id of the document with the fewest paragraphs.",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;",
      "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the document id with 1 to 2 paragraphs?",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  = 2;",
      "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Give the ids of documents that have between one and two paragraphs.",
      "pred": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*)  >= 1 AND count(*)  <=  2;",
      "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
      "pred": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland';",
      "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
      "pred": "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'\n\n### NeededColumns:\ndocuments: document name\n\n### SQL:\nSELECT document_name FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil') INTERSECT SELECT document_name FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')\n\n### NeededColumns:\ndoc;",
      "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many teachers are there?",
      "pred": "SELECT count(*) FROM teacher;",
      "gold": "SELECT count(*) FROM teacher",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the total count of teachers?",
      "pred": "SELECT count(*) FROM teacher;",
      "gold": "SELECT count(*) FROM teacher",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the names of teachers in ascending order of age.",
      "pred": "SELECT name FROM teacher ORDER BY age ASC;",
      "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names of the teachers ordered by ascending age?",
      "pred": "SELECT name FROM teacher ORDER BY age ASC;",
      "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the age and hometown of teachers?",
      "pred": "SELECT age ,  hometown FROM teacher;",
      "gold": "SELECT Age ,  Hometown FROM teacher",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the age and hometown of every teacher?",
      "pred": "SELECT age ,  hometown FROM teacher;",
      "gold": "SELECT Age ,  Hometown FROM teacher",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
      "pred": "SELECT name FROM teacher WHERE hometown != \" Little Lever Urban District \"\n\n### NeededColumns:\ncourse_arrange.teacher_id ,  course.course_id\n\n### SQL:\nSELECT T1.teacher_id FROM course_arrange AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.teacher_id HAVING COUNT(*)  >  1\n\n### NeededColumns:\ncourse_arrange.teacher_id ,  course.course_id;",
      "gold": "select name from teacher where hometown != \"little lever urban district\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
      "pred": "SELECT name FROM teacher WHERE hometown != \" Little Lever Urban District\"\n\n### NeededColumns:\ncourse: course id, start_date, course\nteacher: teacher id, name, age, hometown\ncourse_arrange: teacher id, course id, grade\n\n### SQL:\nSELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.TID  =  T2.TID GROUP BY T1.TID HAVING COUNT(*)  >  1\n\n### NeededColumns:\ncourse: course id;",
      "gold": "select name from teacher where hometown != \"little lever urban district\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show the name of teachers aged either 32 or 33?",
      "pred": "SELECT name FROM teacher WHERE age  = 32 OR age  = 33;",
      "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names of the teachers who are aged either 32 or 33?",
      "pred": "SELECT name FROM teacher WHERE age  = 32 OR age  = 33;",
      "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the hometown of the youngest teacher?",
      "pred": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;",
      "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Where is the youngest teacher from?",
      "pred": "SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;",
      "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show different hometown of teachers and the number of teachers from each hometown.",
      "pred": "SELECT hometown ,  count(*) FROM teacher GROUP BY hometown\n\n### NeededColumns:\ncourse: course id, course, course arrange, teacher id\n\n### SQL:\nSELECT count(*) FROM course\n\n### NeededColumns:\nteacher: name, age, hometown\n\n### SQL:\nSELECT count(*) FROM teacher\n\n### NeededColumns:\ncourse_arrange: course id, teacher id\n\n### SQL:\nSELECT count(*) FROM course_arrange\n\n### NeededColumns:\ncourse: course id, course, course arrange;",
      "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "For each hometown, how many teachers are there?",
      "pred": "SELECT hometown ,  count(*) FROM teacher GROUP BY hometown;",
      "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the most common hometown of teachers.",
      "pred": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the most commmon hometowns for teachers?",
      "pred": "SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show the hometowns shared by at least two teachers.",
      "pred": "SELECT hometown FROM teacher GROUP BY hometown HAVING count(*)  >=  2;",
      "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the towns from which at least two teachers come from?",
      "pred": "SELECT hometown FROM teacher GROUP BY hometown HAVING count(*)  >=  2;",
      "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Show names of teachers and the courses they are arranged to teach.",
      "pred": "SELECT T1.name ,  T3.course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T2.course_id  =  T3.course_id ORDER BY T1.name ASC;",
      "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the name of each teacher and what course they teach?",
      "pred": "SELECT T1.name ,  T3.course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.course  =  'Math' ORDER BY T1.name ASC;",
      "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
      "pred": "SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.TID  =  T2.TID ORDER BY T1.name ASC;",
      "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
      "pred": "SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T2.course_id  =  T3.course_id ORDER BY T1.name ASC;",
      "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show the name of the teacher for the math course.",
      "pred": "SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.course  =  'Math'\n\n### NeededColumns:\ncourse: course id, course, start year\nteacher: teacher id, name, age, hometown\ncourse_arrange: course id, teacher id, grade\n\n### SQL:\nSELECT T3.course FROM course AS T1 JOIN course_;",
      "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the people who teach math courses?",
      "pred": "SELECT T1.name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.course  =  'Math'\n\n### NeededColumns:\ncourse: course id, course, starting year\nteacher: teacher id, name, age, hometown\ncourse_arrange: teacher id, course id, grade\n\n### SQL:\nSELECT T1.course_id ,  T2.name;",
      "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Show names of teachers and the number of courses they teach.",
      "pred": "SELECT T1.name ,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 5;",
      "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the teachers and how many courses do they teach?",
      "pred": "SELECT T1.name ,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 5;",
      "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Show names of teachers that teach at least two courses.",
      "pred": "SELECT name FROM teacher GROUP BY name HAVING count(*)  >=  2;",
      "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names of the teachers who teach at least two courses?",
      "pred": "SELECT name FROM teacher GROUP BY name HAVING count(*)  >=  2;",
      "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List the names of teachers who have not been arranged to teach courses.",
      "pred": "SELECT name FROM teacher WHERE TID NOT IN (SELECT TID FROM course_arrange)\n\n### NeededColumns:\nteacher.name\n\n### SQL:\nSELECT name FROM teacher WHERE TID NOT IN (SELECT TID FROM course_arrange)\n\n### NeededColumns:\ncourse_arrange.TID ,  teacher.name\n\n### SQL:\nSELECT TID ,  name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.TID  =  T2.TID WHERE T1.TID NOT IN (SELECT TID FROM course;",
      "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the teachers whose courses have not been arranged?",
      "pred": "SELECT name FROM teacher WHERE TID NOT IN (SELECT TID FROM course_arrange)\n\n### NeededColumns:\nteacher.name\n\n### SQL:\nSELECT name FROM teacher WHERE TID NOT IN (SELECT TID FROM course_arrange)\n\n### NeededColumns:\ncourse_arrange.TID ,  teacher.name\n\n### SQL:\nSELECT TID ,  name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.TID  =  T2.TID WHERE T1.GRADE  =  'Freshman';",
      "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many visitors below age 30 are there?",
      "pred": "SELECT count(*) FROM customer WHERE age  <  30;",
      "gold": "SELECT count(*) FROM visitor WHERE age  <  30",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
      "pred": "SELECT name FROM customer WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC;",
      "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the average age of the visitors whose membership level is not higher than 4?",
      "pred": "SELECT avg(age) FROM customer WHERE level_of_membership  <=  4\n\n### NeededTables:\ncustomer\n\n### SQL:\nSELECT avg(age) FROM customer WHERE level_of_membership  <=  4\n\n### NeededColumns:\ncustomer: age\n\n### SQL:\nSELECT avg(age) FROM customer WHERE level_of_membership  <=  4\n\n### NeededTables:\ncustomer: museum\n\n### SQL:\nSELECT avg(age) FROM customer WHERE level_of_membership  <=  4;",
      "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
      "pred": "SELECT name, level_of_membership, age FROM customer WHERE level_of_membership  >  4 ORDER BY age DESC;",
      "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the id and name of the museum that has the most staff members?",
      "pred": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;",
      "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the average number of staff working for the museums that were open before 2009.",
      "pred": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;",
      "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the opening year and staff number of the museum named Plaza Museum?",
      "pred": "SELECT open_year ,  num_of_staff FROM museum WHERE name  =  \"Plaza Museum\"\n\n### NeededTables:\nmuseum\n\n### NeededColumns:\nmuseum\n\n### SQL:\nSELECT * FROM museum WHERE name  =  \"Plaza Museum\"\n\n### NeededTables:\nmuseum\n\n### NeededColumns:\nopen_year\nnum_of_staff\n\n### SQL:\nSELECT * FROM museum WHERE name  =  \"Plaza Museum\"\n\n### NeededTables:\nmuse;",
      "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
      "pred": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)\n\n### NeededColumns:\nmuseum.name\n\n### SQL:\nSELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)\n\n### NeededColumns:\nmuseum.name\n\n### SQL:\nSELECT name FROM museum WHERE num_of_staff  >  (;",
      "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "find the id, name and age for visitors who visited some museums more than once.",
      "pred": "SELECT T1.customer_id ,  T1.name ,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  1;",
      "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
      "pred": "SELECT T1.customer_id ,  T1.name ,  T1.level_of_membership FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(total_spent) DESC LIMIT 1;",
      "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the id and name of the museum visited most times?",
      "pred": "SELECT T1.museum_id ,  T2.name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T1.museum_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name of the museum that had no visitor yet?",
      "pred": "SELECT name FROM museum WHERE num_of_staff  =   0\n\n### NeededTables:\nmuseum\n\n### SQL:\nSELECT name FROM museum WHERE num_of_staff  =  0\n\n### NeededColumns:\nmuseum.name\n\n### SQL:\nSELECT name FROM museum WHERE num_of_staff  =  0\n\n### NeededColumns:\nmuseum.name\n\n### SQL:\nSELECT name FROM museum WHERE num_of_staff  =  0\n\n### NeededColumns:\nmuseum.name;",
      "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name and age of the visitor who bought the most tickets at once.",
      "pred": "SELECT name, age FROM customer WHERE customer_id IN (SELECT customer_id FROM visit GROUP BY customer_id ORDER BY sum(num_of_ticket) DESC LIMIT 1)\n\n### NeededColumns:\ncustomer: name, age\nvisit: customer_id, num_of_ticket\n\n### SQL:\nSELECT T1.name, T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T2.num_of_t;",
      "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the average and maximum number of tickets bought in all visits?",
      "pred": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit;",
      "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the total ticket expense of the visitors whose membership level is 1?",
      "pred": "SELECT sum(total_spent) FROM visit WHERE customer_id IN (SELECT customer_id FROM customer WHERE level_of_membership  = 1)\n\n### NeededTables:\nvisit, customer\n\n### SQL:\nSELECT sum(total_spent) FROM visit WHERE customer_id IN (SELECT customer_id FROM customer WHERE level_of_membership  = 1)\n\n### NeededColumns:\nvisit.total_spent\n\n### SQL:\nSELECT sum(total_spent) FROM visit WHERE customer_id IN (SELECT customer_id FROM customer;",
      "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
      "pred": "SELECT name FROM customer WHERE customer_id IN ( SELECT customer_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year  <  2009 ) INTERSECT SELECT customer_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year  >  2011 ) )\n\n### NeededTables:\nvisit, museum, customer\n\n### SQL:\nSELECT T1.name FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id JOIN museum AS;",
      "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of visitors who did not visit any museum opened after 2010.",
      "pred": "SELECT count(*) FROM customer WHERE age NOT IN (SELECT open_year FROM museum)\n\n### NeededColumns:\ncustomer.name\n\n### SQL:\nSELECT count(*) FROM customer WHERE age NOT IN (SELECT open_year FROM museum)\n\n### NeededColumns:\ncustomer.name\n\n### SQL:\nSELECT count(*) FROM customer WHERE age NOT IN (SELECT open_year FROM museum)\n\n### NeededColumns:\ncustomer.name\n\n### SQL:\nSELECT count(*) FROM customer WHERE age NOT IN (SELECT open_year FROM museum)\n\n### Needed;",
      "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many museums were opened after 2013 or before 2008?",
      "pred": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;",
      "gold": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the total number of players.",
      "pred": "SELECT count(*) FROM players;",
      "gold": "SELECT count(*) FROM players",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "How many players are there?",
      "pred": "SELECT count(DISTINCT player_id) FROM rankings;",
      "gold": "SELECT count(*) FROM players",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the total number of matches.",
      "pred": "SELECT count(*) FROM matches;",
      "gold": "SELECT count(*) FROM matches",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Count the number of matches.",
      "pred": "SELECT count(*) FROM matches;",
      "gold": "SELECT count(*) FROM matches",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the first name and birth date of all players from the country with code USA.",
      "pred": "SELECT first_name, birth_date FROM players WHERE country_code  =  \"USA\"\n\n### NeededColumns:\nplayers.first_name, players.birth_date\n\n### SQL:\nSELECT first_name ,  birth_date FROM players WHERE country_code  =  \"USA\"\n\n### NeededColumns:\nplayers.first_name, players.birth_date\n\n### SQL:\nSELECT first_name ,  birth_date FROM players WHERE country_code  =  \"USA\"\n\n### NeededColumns:\nplayers.first;",
      "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the first names and birth dates of players from the USA?",
      "pred": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  \"USA\"\n\n### NeededColumns:\nplayers.first_name ,  players.birth_date\n\n### SQL:\nSELECT first_name ,  birth_date FROM players WHERE country_code  =  \"USA\"\n\n### NeededColumns:\nplayers.first_name ,  players.birth_date\n\n### SQL:\nSELECT first_name ,  birth_date FROM players WHERE country_code  =  \"USA\"\n\n### NeededColumns:\nplay;",
      "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average age of losers and winners of all matches.",
      "pred": "SELECT avg(age) FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches);",
      "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the average ages of losers and winners across matches?",
      "pred": "SELECT avg(ranking_points) FROM rankings WHERE ranking_date  =  \"2014-08-01\"\n\n### NeededColumns:\nplayers.first_name, players.last_name\n\n### SQL:\nSELECT first_name, last_name FROM players ORDER BY first_name ASC LIMIT 10\n\n### NeededColumns:\nmatches.winner_name\n\n### SQL:\nSELECT winner_name FROM matches WHERE score  =  \"10-1\"\n\n### NeededColumns:\nrankings.ranking;",
      "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average rank of winners in all matches.",
      "pred": "SELECT avg(ranking_points) FROM rankings WHERE ranking_date  =  '2014-08-09' AND ranking  =  '1'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT avg(ranking_points) FROM rankings WHERE ranking  =  '1'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT avg(ranking_points) FROM rankings WHERE ranking  =  '2'\n\n### NeededColumns:\n\n\n### SQL:\nSELECT avg(ranking_points) FROM rank;",
      "gold": "SELECT avg(winner_rank) FROM matches",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average rank for winners in all matches?",
      "pred": "SELECT avg(ranking_points) FROM rankings WHERE ranking_id  =  'Winner'\n\n### NeededTables:\nrankings\n\n### SQL:\nSELECT avg(ranking) FROM rankings WHERE ranking_id  =  'Winner'\n\n### NeededColumns:\nrankings.ranking\n\n### NeededTables:\nrankings\n\n### SQL:\nSELECT avg(ranking_points) FROM rankings WHERE ranking_id  =  'Winner'\n\n### NeededColumns:\nrankings.ranking_points;",
      "gold": "SELECT avg(winner_rank) FROM matches",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the highest rank of losers in all matches.",
      "pred": "SELECT max(ranking) FROM rankings;",
      "gold": "SELECT min(loser_rank) FROM matches",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the best rank of losers across all matches?",
      "pred": "SELECT min(ranking) FROM rankings;",
      "gold": "SELECT min(loser_rank) FROM matches",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "find the number of distinct country codes of all players.",
      "pred": "SELECT count(DISTINCT country_code) FROM players WHERE ranking_points  >   100\n\n### NeededColumns:\nplayers.country_code\n\n### SQL:\nSELECT count(DISTINCT country_code) FROM players\n\n### NeededColumns:\nplayers.country_code\n\n### SQL:\nSELECT count(DISTINCT country_code) FROM players WHERE ranking_points  >  100\n\n### NeededColumns:\nplayers.country_code\n\n### SQL:\nSELECT count(DISTINCT country_;",
      "gold": "SELECT count(DISTINCT country_code) FROM players",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many distinct countries do players come from?",
      "pred": "SELECT count(DISTINCT country_code) FROM players;",
      "gold": "SELECT count(DISTINCT country_code) FROM players",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the number of distinct name of losers.",
      "pred": "SELECT count(DISTINCT(tourney_name)) FROM rankings;",
      "gold": "SELECT count(DISTINCT loser_name) FROM matches",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many different loser names are there?",
      "pred": "SELECT count(DISTINCT loser_name) FROM matches WHERE loser_rank_points  >  1000\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(DISTINCT loser_name) FROM matches WHERE loser_rank_points  >  1000\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(DISTINCT loser_name) FROM matches WHERE loser_rank_points  >  1000\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count;",
      "gold": "SELECT count(DISTINCT loser_name) FROM matches",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name of tourney that has more than 10 matches.",
      "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;",
      "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the names of tournaments that have more than 10 matches?",
      "pred": "SELECT tournament_name FROM matches GROUP BY tournament_name HAVING count(*)  >  10;",
      "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List the names of all winners who played in both 2013 and 2016.",
      "pred": "SELECT winner_name FROM matches WHERE YEAR  =  \"2013\" INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  \"2016\"\n\n### NeededColumns:\nwinner_name\n\n### SQL:\nSELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\n\n### NeededColumns:\nwinner_name\n\n### SQL:\nSELECT winner_name FROM matches WHERE YEAR  =  2013;",
      "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of players who won in both 2013 and 2016?",
      "pred": "SELECT first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE YEAR  =  \"2013\") INTERSECT SELECT first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE YEAR  =  \"2016\");",
      "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List the number of all matches who played in years of 2013 or 2016.",
      "pred": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\n\n### NeededColumns:\nmatches.match_num\n\n### SQL:\nSELECT count(*) FROM matches\n\n### NeededColumns:\nplayers.player_id\n\n### SQL:\nSELECT count(*) FROM players\n\n### NeededColumns:\nrankings.ranking_date\n\n### SQL:\nSELECT count(*) FROM rankings WHERE ranking_date  =  1999\n\n### NeededColumns:\nmatches.surface;",
      "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many matches were played in 2013 or 2016?",
      "pred": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\n\n### NeededColumns:\nmatches.year\n\n### SQL:\nSELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\n\n### NeededColumns:\nmatches.year\n\n### SQL:\nSELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\n\n### NeededColumns:\nmatches.year;",
      "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
      "pred": "SELECT DISTINCT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  \"WTA Championships\" INTERSECT SELECT DISTINCT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  \"Australian Open\";",
      "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
      "pred": "SELECT first_name ,  country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = \"WTA Championships\") INTERSECT SELECT first_name ,  country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = \"Australian Open\");",
      "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name and country code of the oldest player.",
      "pred": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;",
      "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the first name and country code of the oldest player?",
      "pred": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;",
      "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the first and last name of all players in the order of birth date.",
      "pred": "SELECT first_name ,  last_name FROM players ORDER BY birth_date ASC;",
      "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the full names of all players, sorted by birth date?",
      "pred": "SELECT first_name FROM players ORDER BY birth_date ASC;",
      "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
      "pred": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date ASC;",
      "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What are the full names of all left handed players, in order of birth date?",
      "pred": "SELECT first_name FROM players WHERE hand  =  \"L\" ORDER BY birth_date ASC;",
      "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the first name and country code of the player who did the most number of tours.",
      "pred": "SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1;",
      "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the first name and country code of the player with the most tours?",
      "pred": "SELECT T1.first_name ,  T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the year that has the most number of matches.",
      "pred": "SELECT ranking_date FROM rankings GROUP BY ranking_date ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Which year had the most matches?",
      "pred": "SELECT ranking_date FROM rankings GROUP BY ranking_date ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name and rank points of the winner who won the most times.",
      "pred": "SELECT winner_name ,  winner_rank_points FROM Matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
      "pred": "SELECT T1.first_name ,  T1.last_name ,  T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
      "pred": "SELECT winner_name FROM matches WHERE tourney_name = \"Australian Open\" ORDER BY winner_rank_points DESC LIMIT 1;",
      "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
      "pred": "SELECT winner_name ,  winner_rank_points FROM Matches AS T1 JOIN Rankings AS T2 ON T1.winner_id  =  T2.player_id WHERE tour_name  =  \"Australian Open\" ORDER BY winner_rank_points DESC LIMIT 1;",
      "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
      "pred": "SELECT T1.first_name ,  T2.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.minutes  =  (SELECT max(minutes) FROM matches) UNION SELECT T1.first_name ,  T2.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.loser_id WHERE T2.minutes  =  (SELECT max(minutes) FROM matches)\n\n### NeededColumns:;",
      "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the names of the winner and loser who played in the longest match?",
      "pred": "SELECT t1.first_name ,  t2.first_name FROM players AS t1 JOIN matches AS t2 ON t1.player_id  =  t2.winner_id ORDER BY t2.minutes DESC LIMIT 1\n\n### NeededColumns:\nplayers.first_name\n\n### SQL:\nSELECT t1.first_name ,  t2.first_name FROM players AS t1 JOIN matches AS t2 ON t1.player_id  =  t2.winner_id ORDER BY t2.minutes DESC LIMIT 1;",
      "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the average ranking for each player and their first name.",
      "pred": "SELECT avg(ranking_points) ,  first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY first_name;",
      "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the first names of all players, and their average rankings?",
      "pred": "SELECT avg(Ranking) ,  first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY first_name;",
      "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the total ranking points for each player and their first name.",
      "pred": "SELECT ranking_points ,  first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY player_id ORDER BY sum(ranking_points) DESC LIMIT 5;",
      "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the first names of all players, and their total ranking points?",
      "pred": "SELECT T1.first_name ,  sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\n\n### NeededColumns:\nplayers.first_name ,  players.last_name ,  rankings.ranking_points\n\n### SQL:\nSELECT T1.first_name ,  T1.last_name ,  T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.;",
      "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "find the number of players for each country.",
      "pred": "SELECT country_code ,  count(*) FROM players GROUP BY country_code\n\n### NeededColumns:\nplayers.country_code\n\n### SQL:\nSELECT country_code ,  count(*) FROM players GROUP BY country_code\n\n### NeededColumns:\nplayers.country_code\n\n### SQL:\nSELECT country_code ,  count(*) FROM players GROUP BY country_code\n\n### NeededColumns:\nplayers.country_code\n\n### SQL:\nSELECT country_code ,  count(*) FROM players GROUP BY country_code\n\n### Need;",
      "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many players are from each country?",
      "pred": "SELECT count(*) ,  players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.country_code\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) ,  players.country_code FROM players GROUP BY players.country_code\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) ,  players.country_code FROM players GROUP BY players.country_code\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) ,  players.country_;",
      "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "find the code of the country where has the greatest number of players.",
      "pred": "SELECT country_code ,  count(*) FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;",
      "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is the code of the country with the most players?",
      "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY count DESC LIMIT 1;",
      "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "Find the codes of countries that have more than 50 players.",
      "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50\n\n### NeededColumns:\ncountry code\n\n### SQL:\nSELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50\n\n### NeededColumns:\ncountry code, first name, last name\n\n### SQL:\nSELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50\n\n### NeededColumns:\ncountry code, first name, last name\n\n### SQL:\nSELECT country;",
      "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the codes of countries with more than 50 players?",
      "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50\n\n### NeededTables:\nplayers\n\n### SQL:\nSELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50\n\n### NeededColumns:\ncountry code\n\n### SQL:\nSELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50\n\n### NeededTables:\nplayers\n\n### SQL:\nSELECT country_code FROM players GROUP BY country_code H;",
      "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the total number of tours for each ranking date.",
      "pred": "SELECT ranking_date ,  count(*) FROM rankings GROUP BY ranking_date\n\n### NeededColumns:\nranking_date\n\n### SQL:\nSELECT ranking_date ,  COUNT(*) FROM rankings GROUP BY ranking_date\n\n### NeededColumns:\nranking_date\n\n### SQL:\nSELECT ranking_date ,  COUNT(*) FROM rankings GROUP BY ranking_date\n\n### NeededColumns:\nranking_date\n\n### SQL:\nSELECT ranking_date ,  COUNT(*) FROM rankings GROUP BY ranking_date\n\n### NeededColumns;",
      "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many total tours were there for each ranking date?",
      "pred": "SELECT ranking_date ,  count(*) FROM rankings GROUP BY ranking_date\n\n### NeededTables:\nrankings\n\n### NeededColumns:\n\n\n### SQL:\nSELECT COUNT(DISTINCT ranking) FROM rankings WHERE ranking_date  =  '2010-08-01'\n\n### NeededTables:\nrankings\n\n### NeededColumns:\n\n\n### SQL:\nSELECT COUNT(DISTINCT ranking) FROM rankings WHERE ranking_date  =  '2010-08-01';",
      "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of matches happened in each year.",
      "pred": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\n\n### NeededColumns:\nmatches.YEAR\n\n### SQL:\nSELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\n\n### NeededColumns:\nmatches.YEAR\n\n### SQL:\nSELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\n\n### NeededColumns:\nmatches.YEAR\n\n### SQL:\nSELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\n\n### Need;",
      "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "How many matches were played in each year?",
      "pred": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\n\n### NeededColumns:\nmatches.YEAR\n\n### SQL:\nSELECT count(*) FROM matches GROUP BY YEAR\n\n### NeededColumns:\nmatches.YEAR\n\n### SQL:\nSELECT count(*) FROM matches GROUP BY YEAR ORDER BY YEAR DESC\n\n### NeededColumns:\nmatches.YEAR\n\n### SQL:\nSELECT count(*) FROM matches GROUP BY YEAR ORDER BY YEAR\n\n### NeededColumns:;",
      "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the name and rank of the 3 youngest winners across all matches.",
      "pred": "SELECT T1.first_name ,  T1.last_name ,  T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.ranking_points DESC LIMIT 3;",
      "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What are the names and ranks of the three youngest winners across all matches?",
      "pred": "SELECT T1.first_name ,  T1.last_name ,  T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.ranking_points ASC LIMIT 3;",
      "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many different winners both participated in the WTA Championships and were left handed?",
      "pred": "SELECT count(DISTINCT(winner_id)) FROM matches WHERE tourney_id  =  \"WTA Championships\" AND winner_hand  =  \"L\"\n\n### NeededColumns:\nmatches.winner_id\n\n### SQL:\nSELECT count(DISTINCT(winner_id)) FROM matches WHERE tourney_id  =  \"WTA Championships\" AND winner_hand  =  \"L\"\n\n### NeededColumns:\nmatches.winner_id\n\n### SQL:\nSELECT count(DISTINCT(winner_id;",
      "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the number of left handed winners who participated in the WTA Championships.",
      "pred": "SELECT count(*) FROM matches WHERE winner_hand  =  \"L\" AND tourney_name  =  \"WTA Championships\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM matches WHERE winner_hand  =  \"L\" AND tourney_name  =  \"WTA Championships\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count(*) FROM matches WHERE winner_hand  =  \"L\" AND tourney_name  =  \"WTA Championships\"\n\n### NeededColumns:\n\n\n### SQL:\nSELECT count;",
      "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
      "pred": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1;",
      "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
      "pred": "SELECT first_name, country_code, birth_date FROM players WHERE player_id IN ( SELECT winner_id FROM matches WHERE winner_rank_points  =  ( SELECT max(winner_rank_points) FROM matches ) ) LIMIT 1;",
      "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "exact": false,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "Find the number of players for each hand type.",
      "pred": "SELECT hand ,  count(*) FROM players GROUP BY hand;",
      "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many players are there for each hand type?",
      "pred": "SELECT hand ,  count(*) FROM players GROUP BY hand;",
      "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "How many ships ended up being 'Captured'?",
      "pred": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'\n\n### NeededTables:\nship\n\n### SQL:\nSELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'\n\n### NeededColumns:\nship: disposition_of_ship\n\n### NeededTables:\nship\n\n### SQL:\nSELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'\n\n### NeededColumns:\nship: disposition_of_ship\n\n### NeededTables:;",
      "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
      "pred": "SELECT name ,  tonnage FROM ship ORDER BY name DESC;",
      "gold": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
      "exact": true,
      "valid": true,
      "exec_match": true
    },
    {
      "question": "List the name, date and result of each battle.",
      "pred": "SELECT name, date, result FROM battle;",
      "gold": "SELECT name ,  date FROM battle",
      "exact": false,
      "valid": true,
      "exec_match": false
    },
    {
      "question": "What is maximum and minimum death toll caused each time?",
      "pred": "SELECT max(T1.killed + T1.injured) ,  min(T1.killed + T1.injured) FROM death AS T1 JOIN battle AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.result  =  'loss'\n\n### NeededTables:\ndeath, battle\n\n### SQL:\nSELECT max(T1.killed + T1.injured) ,  min(T1.killed + T1.injured) FROM death AS T1 JOIN;",
      "gold": "SELECT max(killed) ,  min(killed) FROM death",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What is the average number of injuries caused each time?",
      "pred": "SELECT avg(caused_by_ship_id) FROM death WHERE killed  >   100\n\n### NeededTables:\ndeath\n\n### SQL:\nSELECT avg(caused_by_ship_id) FROM death WHERE killed  >  100\n\n### NeededColumns:\ndeath.caused_by_ship_id\n\n### SQL:\nSELECT avg(caused_by_ship_id) FROM death WHERE killed  >  100\n\n### NeededColumns:\ndeath.caused_by_ship_id;",
      "gold": "SELECT avg(injured) FROM death",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
      "pred": "SELECT caused_by_ship_id ,  note ,  killed ,  injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage  =  't')\n\n### NeededColumns:\ndeath.caused by ship id\n\n### SQL:\nSELECT caused_by_ship_id ,  note ,  killed ,  injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage  =  't')\n\n### NeededColumns:\ndeath.caused_by_ship_id\n\n### SQL:;",
      "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
      "pred": "SELECT name, result FROM battle WHERE Bulgarian_Commander != \"Boril\"\n\n### NeededColumns:\nbattle.name, death.killed\n\n### SQL:\nSELECT T1.name ,  T2.killed FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id WHERE T1.Bulgarian_Commander != \"Boril\"\n\n### NeededColumns:\ndeath.killed, death.injured\n\n### SQL:\nSELECT killed ,;",
      "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
      "pred": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'\n\n### NeededColumns:\nbattle: id, name\nship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship\n\n### SQL:\nSELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2;",
      "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
      "exact": false,
      "valid": false,
      "exec_match": false
    },
    {
      "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
      "pred": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1.id HAVING sum(T2.killed)  >  10\n\n### NeededColumns:\nbattle: id, name\ndeath: killed\n\n### SQL:\nSELECT T1.id ,  T1.name FROM battle AS T1 JOIN death AS T2 ON T1.id  =  T2.caused_by_ship_id GROUP BY T1;",
      "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
      "exact": false,
      "valid": false,
      "exec_match": false
    }
  ]
}